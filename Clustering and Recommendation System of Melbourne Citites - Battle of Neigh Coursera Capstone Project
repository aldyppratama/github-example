{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Clustering Neighborhood in Melbourne: Discovering Your Preferences"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Is Melbourne one of many places on your bucket lists? or… Having trouble on planning your weekend in Melbourne? Grasp a brief exploration on what the city looks like!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While taking time to travel or taking a weekend detour at Melbourne, people generally ask one self on what are some acceptable spots close by based on their preferences. Hidden coffee shops, underrated parks, cool bars or possibly those art galleries holding on to be found. Yet, by asking people that been staying in the area would offer the best answer, or by having a Google search would do. However consider the possibility that we could investigate further on what sort of spots are there in which region before booking the spot. This project means to address that question. This paper is mainly designed for travelers. Yet, information in this paper may be valuable for those people of Australia, individuals that keen on maintaining the housing or related business around the neighborhood, or in any event, for individuals who think about living in Melbourne. To add more information, Author builds a recommender system. Thus, recommendation system is a content-based recommendation in which the system could offer information of desired venues based on their ratings on user’s previous venue ratings. As travelers or locals preferably want to stroll in Melbourne area, they could discover best spots around in that particular area to check on to!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Scraping"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Firstly I scrape my on .csv files by taking the information from Wikipedia. Wikipedia has one of the most databases for postal code and neighborhood in Melbourne. \n",
    "Source: https://en.wikipedia.org/wiki/List_of_Melbourne_suburbs\n",
    "The dataset would look like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>postcode</th>\n",
       "      <th>suburb</th>\n",
       "      <th>state</th>\n",
       "      <th>dc</th>\n",
       "      <th>type</th>\n",
       "      <th>lat</th>\n",
       "      <th>lon</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>200</td>\n",
       "      <td>AUSTRALIAN NATIONAL UNIVERSITY</td>\n",
       "      <td>ACT</td>\n",
       "      <td>AUSTRALIAN NATIONAL UNI LPO</td>\n",
       "      <td>Post Office Boxes</td>\n",
       "      <td>-35.277272</td>\n",
       "      <td>149.117136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>221</td>\n",
       "      <td>BARTON</td>\n",
       "      <td>ACT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>LVR</td>\n",
       "      <td>-35.201372</td>\n",
       "      <td>149.095065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>800</td>\n",
       "      <td>DARWIN</td>\n",
       "      <td>NT</td>\n",
       "      <td>DARWIN DELIVERY CENTRE</td>\n",
       "      <td>Delivery Area</td>\n",
       "      <td>-12.801028</td>\n",
       "      <td>130.955789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>801</td>\n",
       "      <td>DARWIN</td>\n",
       "      <td>NT</td>\n",
       "      <td>DARWIN DELIVERY CENTRE</td>\n",
       "      <td>Post Office Boxes</td>\n",
       "      <td>-12.801028</td>\n",
       "      <td>130.955789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>804</td>\n",
       "      <td>PARAP</td>\n",
       "      <td>NT</td>\n",
       "      <td>PARAP</td>\n",
       "      <td>Post Office Boxes</td>\n",
       "      <td>-12.432181</td>\n",
       "      <td>130.843310</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   postcode                          suburb state  \\\n",
       "0       200  AUSTRALIAN NATIONAL UNIVERSITY   ACT   \n",
       "1       221                          BARTON   ACT   \n",
       "2       800                          DARWIN    NT   \n",
       "3       801                          DARWIN    NT   \n",
       "4       804                           PARAP    NT   \n",
       "\n",
       "                            dc                                           type  \\\n",
       "0  AUSTRALIAN NATIONAL UNI LPO  Post Office Boxes                               \n",
       "1                          NaN  LVR                                             \n",
       "2       DARWIN DELIVERY CENTRE  Delivery Area                                   \n",
       "3       DARWIN DELIVERY CENTRE  Post Office Boxes                               \n",
       "4                        PARAP  Post Office Boxes                               \n",
       "\n",
       "         lat         lon  \n",
       "0 -35.277272  149.117136  \n",
       "1 -35.201372  149.095065  \n",
       "2 -12.801028  130.955789  \n",
       "3 -12.801028  130.955789  \n",
       "4 -12.432181  130.843310  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import types\n",
    "import pandas as pd\n",
    "\n",
    "df_lat_long = pd.read_csv(r'/Users/Aldy/Desktop/Australian_Post_Codes_Lat_Lon.csv')\n",
    "df_lat_long.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PostalCode</th>\n",
       "      <th>City</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3053</td>\n",
       "      <td>Carlton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3054</td>\n",
       "      <td>Carlton North</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3008</td>\n",
       "      <td>Docklands</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3002</td>\n",
       "      <td>East Melbourne</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3031</td>\n",
       "      <td>Flemington, Kensington</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PostalCode                    City\n",
       "0        3053                 Carlton\n",
       "1        3054           Carlton North\n",
       "2        3008               Docklands\n",
       "3        3002          East Melbourne\n",
       "4        3031  Flemington, Kensington"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(r'/Users/Aldy/Desktop/City_of_Melbourne.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Postalcode</th>\n",
       "      <th>Neighbourhood</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3053</td>\n",
       "      <td>Carlton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3054</td>\n",
       "      <td>Carlton North</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3008</td>\n",
       "      <td>Docklands</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3002</td>\n",
       "      <td>East Melbourne</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3031</td>\n",
       "      <td>Flemington, Kensington</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3000</td>\n",
       "      <td>Melbourne</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3004</td>\n",
       "      <td>Melbourne</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3051</td>\n",
       "      <td>North Melbourne</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3052</td>\n",
       "      <td>Parkville</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3207</td>\n",
       "      <td>Port Melbourne</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3006</td>\n",
       "      <td>Southbank, South Wharf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>3141</td>\n",
       "      <td>South Yarra</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>3003</td>\n",
       "      <td>West Melbourne</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Postalcode           Neighbourhood\n",
       "0         3053                 Carlton\n",
       "1         3054           Carlton North\n",
       "2         3008               Docklands\n",
       "3         3002          East Melbourne\n",
       "4         3031  Flemington, Kensington\n",
       "5         3000               Melbourne\n",
       "6         3004               Melbourne\n",
       "7         3051         North Melbourne\n",
       "8         3052               Parkville\n",
       "9         3207          Port Melbourne\n",
       "10        3006  Southbank, South Wharf\n",
       "11        3141             South Yarra\n",
       "12        3003          West Melbourne"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=df.rename(columns={\"City\": \"Neighbourhood\", \"PostalCode\": \"Postalcode\"})\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Postalcode</th>\n",
       "      <th>state</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>200</td>\n",
       "      <td>ACT</td>\n",
       "      <td>-35.277272</td>\n",
       "      <td>149.117136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>221</td>\n",
       "      <td>ACT</td>\n",
       "      <td>-35.201372</td>\n",
       "      <td>149.095065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>800</td>\n",
       "      <td>NT</td>\n",
       "      <td>-12.801028</td>\n",
       "      <td>130.955789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>801</td>\n",
       "      <td>NT</td>\n",
       "      <td>-12.801028</td>\n",
       "      <td>130.955789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>804</td>\n",
       "      <td>NT</td>\n",
       "      <td>-12.432181</td>\n",
       "      <td>130.843310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>810</td>\n",
       "      <td>NT</td>\n",
       "      <td>-12.378451</td>\n",
       "      <td>130.877014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>810</td>\n",
       "      <td>NT</td>\n",
       "      <td>-12.367769</td>\n",
       "      <td>130.869808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>810</td>\n",
       "      <td>NT</td>\n",
       "      <td>-12.376597</td>\n",
       "      <td>130.850489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>810</td>\n",
       "      <td>NT</td>\n",
       "      <td>-12.385761</td>\n",
       "      <td>130.873726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>810</td>\n",
       "      <td>NT</td>\n",
       "      <td>-12.360865</td>\n",
       "      <td>130.891349</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Postalcode state   Latitude   Longitude\n",
       "0         200   ACT -35.277272  149.117136\n",
       "1         221   ACT -35.201372  149.095065\n",
       "2         800    NT -12.801028  130.955789\n",
       "3         801    NT -12.801028  130.955789\n",
       "4         804    NT -12.432181  130.843310\n",
       "5         810    NT -12.378451  130.877014\n",
       "6         810    NT -12.367769  130.869808\n",
       "7         810    NT -12.376597  130.850489\n",
       "8         810    NT -12.385761  130.873726\n",
       "9         810    NT -12.360865  130.891349"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_lat_long=df_lat_long.rename(columns={\"postcode\": \"Postalcode\", \"lat\": \"Latitude\", \"lon\": \"Longitude\", \"suburb\": \"Suburb\"})\n",
    "\n",
    "df_lat_long=df_lat_long.drop(['Suburb', 'dc', 'type'], axis=1)\n",
    "\n",
    "df_lat_long.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting package metadata (current_repodata.json): done\n",
      "Solving environment: done\n",
      "\n",
      "## Package Plan ##\n",
      "\n",
      "  environment location: /Users/Aldy/opt/anaconda3\n",
      "\n",
      "  added / updated specs:\n",
      "    - geopy\n",
      "\n",
      "\n",
      "The following packages will be downloaded:\n",
      "\n",
      "    package                    |            build\n",
      "    ---------------------------|-----------------\n",
      "    ca-certificates-2020.4.5.2 |       hecda079_0         146 KB  conda-forge\n",
      "    certifi-2020.4.5.2         |   py37hc8dfbb8_0         152 KB  conda-forge\n",
      "    geographiclib-1.50         |             py_0          34 KB  conda-forge\n",
      "    geopy-1.22.0               |     pyh9f0ad1d_0          63 KB  conda-forge\n",
      "    openssl-1.1.1g             |       h0b31af3_0         1.9 MB  conda-forge\n",
      "    ------------------------------------------------------------\n",
      "                                           Total:         2.3 MB\n",
      "\n",
      "The following NEW packages will be INSTALLED:\n",
      "\n",
      "  geographiclib      conda-forge/noarch::geographiclib-1.50-py_0\n",
      "  geopy              conda-forge/noarch::geopy-1.22.0-pyh9f0ad1d_0\n",
      "  python_abi         conda-forge/osx-64::python_abi-3.7-1_cp37m\n",
      "\n",
      "The following packages will be UPDATED:\n",
      "\n",
      "  ca-certificates     pkgs/main::ca-certificates-2020.1.1-0 --> conda-forge::ca-certificates-2020.4.5.2-hecda079_0\n",
      "  certifi              pkgs/main::certifi-2020.4.5.1-py37_0 --> conda-forge::certifi-2020.4.5.2-py37hc8dfbb8_0\n",
      "  conda                       pkgs/main::conda-4.8.3-py37_0 --> conda-forge::conda-4.8.3-py37hc8dfbb8_1\n",
      "\n",
      "The following packages will be SUPERSEDED by a higher-priority channel:\n",
      "\n",
      "  openssl              pkgs/main::openssl-1.1.1g-h1de35cc_0 --> conda-forge::openssl-1.1.1g-h0b31af3_0\n",
      "\n",
      "\n",
      "\n",
      "Downloading and Extracting Packages\n",
      "ca-certificates-2020 | 146 KB    | ##################################### | 100% \n",
      "certifi-2020.4.5.2   | 152 KB    | ##################################### | 100% \n",
      "geopy-1.22.0         | 63 KB     | ##################################### | 100% \n",
      "geographiclib-1.50   | 34 KB     | ##################################### | 100% \n",
      "openssl-1.1.1g       | 1.9 MB    | ##################################### | 100% \n",
      "Preparing transaction: done\n",
      "Verifying transaction: done\n",
      "Executing transaction: done\n",
      "Collecting package metadata (current_repodata.json): done\n",
      "Solving environment: failed with initial frozen solve. Retrying with flexible solve.\n",
      "Collecting package metadata (repodata.json): done\n",
      "Solving environment: done\n",
      "\n",
      "## Package Plan ##\n",
      "\n",
      "  environment location: /Users/Aldy/opt/anaconda3\n",
      "\n",
      "  added / updated specs:\n",
      "    - folium=0.5.0\n",
      "\n",
      "\n",
      "The following packages will be downloaded:\n",
      "\n",
      "    package                    |            build\n",
      "    ---------------------------|-----------------\n",
      "    altair-4.1.0               |             py_1         614 KB  conda-forge\n",
      "    branca-0.4.1               |             py_0          26 KB  conda-forge\n",
      "    folium-0.5.0               |             py_0          45 KB  conda-forge\n",
      "    vincent-0.4.4              |             py_1          28 KB  conda-forge\n",
      "    ------------------------------------------------------------\n",
      "                                           Total:         713 KB\n",
      "\n",
      "The following NEW packages will be INSTALLED:\n",
      "\n",
      "  altair             conda-forge/noarch::altair-4.1.0-py_1\n",
      "  branca             conda-forge/noarch::branca-0.4.1-py_0\n",
      "  folium             conda-forge/noarch::folium-0.5.0-py_0\n",
      "  vincent            conda-forge/noarch::vincent-0.4.4-py_1\n",
      "\n",
      "\n",
      "\n",
      "Downloading and Extracting Packages\n",
      "vincent-0.4.4        | 28 KB     | ##################################### | 100% \n",
      "branca-0.4.1         | 26 KB     | ##################################### | 100% \n",
      "altair-4.1.0         | 614 KB    | ##################################### | 100% \n",
      "folium-0.5.0         | 45 KB     | ##################################### | 100% \n",
      "Preparing transaction: done\n",
      "Verifying transaction: done\n",
      "Executing transaction: done\n",
      "Folium installed\n",
      "Libraries imported.\n"
     ]
    }
   ],
   "source": [
    "import requests # library to handle requests\n",
    "import pandas as pd # library for data analysis\n",
    "import numpy as np # library to handle data in a vectorized manner\n",
    "import random # library for random number generation\n",
    "\n",
    "!conda install -c conda-forge geopy --yes \n",
    "from geopy.geocoders import Nominatim # module to convert an address into latitude and longitude values\n",
    "\n",
    "# libraries for displaying images\n",
    "from IPython.display import Image \n",
    "from IPython.core.display import HTML \n",
    "    \n",
    "# tranforming json file into a pandas dataframe library\n",
    "from pandas.io.json import json_normalize\n",
    "\n",
    "!conda install -c conda-forge folium=0.5.0 --yes\n",
    "import folium # plotting library\n",
    "\n",
    "print('Folium installed')\n",
    "print('Libraries imported.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Merging"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "At that point, I compiled the information of postal code with the latitude and longitude of the neighborhood for further analysis. The dataset look like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(19, 4)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Postalcode</th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3053</td>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3053</td>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.778987</td>\n",
       "      <td>145.002600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3054</td>\n",
       "      <td>Carlton North</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3054</td>\n",
       "      <td>Carlton North</td>\n",
       "      <td>-37.780995</td>\n",
       "      <td>144.962792</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3008</td>\n",
       "      <td>Docklands</td>\n",
       "      <td>-37.814719</td>\n",
       "      <td>144.948039</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3002</td>\n",
       "      <td>East Melbourne</td>\n",
       "      <td>-37.816640</td>\n",
       "      <td>144.987811</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3031</td>\n",
       "      <td>Flemington, Kensington</td>\n",
       "      <td>-37.788375</td>\n",
       "      <td>144.931472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3031</td>\n",
       "      <td>Flemington, Kensington</td>\n",
       "      <td>-37.794333</td>\n",
       "      <td>144.929217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3000</td>\n",
       "      <td>Melbourne</td>\n",
       "      <td>-37.814563</td>\n",
       "      <td>144.970267</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3004</td>\n",
       "      <td>Melbourne</td>\n",
       "      <td>-37.837324</td>\n",
       "      <td>144.976335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3051</td>\n",
       "      <td>North Melbourne</td>\n",
       "      <td>-37.905996</td>\n",
       "      <td>145.056254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>3052</td>\n",
       "      <td>Parkville</td>\n",
       "      <td>-37.796152</td>\n",
       "      <td>144.961351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>3052</td>\n",
       "      <td>Parkville</td>\n",
       "      <td>-37.788531</td>\n",
       "      <td>144.947731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>3207</td>\n",
       "      <td>Port Melbourne</td>\n",
       "      <td>-37.829244</td>\n",
       "      <td>144.956207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>3207</td>\n",
       "      <td>Port Melbourne</td>\n",
       "      <td>-37.975682</td>\n",
       "      <td>145.030468</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>3006</td>\n",
       "      <td>Southbank, South Wharf</td>\n",
       "      <td>-37.823258</td>\n",
       "      <td>144.965926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>3141</td>\n",
       "      <td>South Yarra</td>\n",
       "      <td>-36.990185</td>\n",
       "      <td>144.063338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>3141</td>\n",
       "      <td>South Yarra</td>\n",
       "      <td>-37.837883</td>\n",
       "      <td>144.991123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>3003</td>\n",
       "      <td>West Melbourne</td>\n",
       "      <td>-37.806255</td>\n",
       "      <td>144.941123</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Postalcode           Neighbourhood   Latitude   Longitude\n",
       "0         3053                 Carlton -37.784337  144.969747\n",
       "1         3053                 Carlton -37.778987  145.002600\n",
       "2         3054           Carlton North -37.784337  144.969747\n",
       "3         3054           Carlton North -37.780995  144.962792\n",
       "4         3008               Docklands -37.814719  144.948039\n",
       "5         3002          East Melbourne -37.816640  144.987811\n",
       "6         3031  Flemington, Kensington -37.788375  144.931472\n",
       "7         3031  Flemington, Kensington -37.794333  144.929217\n",
       "8         3000               Melbourne -37.814563  144.970267\n",
       "9         3004               Melbourne -37.837324  144.976335\n",
       "10        3051         North Melbourne -37.905996  145.056254\n",
       "11        3052               Parkville -37.796152  144.961351\n",
       "12        3052               Parkville -37.788531  144.947731\n",
       "13        3207          Port Melbourne -37.829244  144.956207\n",
       "14        3207          Port Melbourne -37.975682  145.030468\n",
       "15        3006  Southbank, South Wharf -37.823258  144.965926\n",
       "16        3141             South Yarra -36.990185  144.063338\n",
       "17        3141             South Yarra -37.837883  144.991123\n",
       "18        3003          West Melbourne -37.806255  144.941123"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_melbourne = pd.merge(df,\n",
    "                 df_lat_long[['Postalcode','Latitude', 'Longitude']],\n",
    "                 on='Postalcode')\n",
    "\n",
    "print(df_melbourne.shape)\n",
    "df_melbourne.head(20)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Geospatial Map"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below this is the map of the listed neighborhood I previously introduced in a raw data set. Yet, this time I visualized in a form of a map for better view:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe src=\"about:blank\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" data-html= onload=\"this.contentDocument.open();this.contentDocument.write(atob(this.getAttribute('data-html')));this.contentDocument.close();\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x10dc779d0>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "melbourne_latitude = -37.895416\n",
    "melbourne_longitude = 145.021412\n",
    "\n",
    "map_melbourne = folium.Map(location = [melbourne_latitude, melbourne_longitude], zoom_start = 10)\n",
    "\n",
    "# add markers to map\n",
    "for latitude, longitude, neighborhood in zip(df_melbourne['Latitude'], df_melbourne['Longitude'], df_melbourne['Neighbourhood']):\n",
    "    label = '{}'.format(neighborhood)\n",
    "    label = folium.Popup(label, parse_html=True)\n",
    "    folium.CircleMarker(\n",
    "        [latitude, longitude],\n",
    "        radius=5,\n",
    "        popup=label,\n",
    "        color='blue',\n",
    "        fill=True,\n",
    "        fill_color='#3186cc',\n",
    "        fill_opacity=0.7).add_to(map_melbourne)  \n",
    "    \n",
    "\n",
    "map_melbourne"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your credentails:\n",
      "CLIENT_ID: 4ROITVRSP1KZM341C2Y5MCCHRHCY05TDXIYS4LKBRZFQVINW\n",
      "CLIENT_SECRET:OQMKROGAWG02TR32XFVWTZL2C3WSXY3CX4DCRY0IXZJTRWB5\n"
     ]
    }
   ],
   "source": [
    "CLIENT_ID = '4ROITVRSP1KZM341C2Y5MCCHRHCY05TDXIYS4LKBRZFQVINW' # your Foursquare ID\n",
    "CLIENT_SECRET = 'OQMKROGAWG02TR32XFVWTZL2C3WSXY3CX4DCRY0IXZJTRWB5' # your Foursquare Secret\n",
    "VERSION = '20180605' # Foursquare API version\n",
    "\n",
    "radius = 1000\n",
    "LIMIT = 100\n",
    "\n",
    "print('Your credentails:')\n",
    "print('CLIENT_ID: ' + CLIENT_ID)\n",
    "print('CLIENT_SECRET:' + CLIENT_SECRET)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'https://api.foursquare.com/v2/venues/explore?&client_id=4ROITVRSP1KZM341C2Y5MCCHRHCY05TDXIYS4LKBRZFQVINW&client_secret=OQMKROGAWG02TR32XFVWTZL2C3WSXY3CX4DCRY0IXZJTRWB5&v=20180605&ll=-37.895416,145.021412&radius=1000&limit=100'"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# type your answer here\n",
    "\n",
    "LIMIT = 100\n",
    "radius = 1000\n",
    "\n",
    "url = 'https://api.foursquare.com/v2/venues/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(\n",
    "    CLIENT_ID, \n",
    "    CLIENT_SECRET, \n",
    "    VERSION, \n",
    "    melbourne_latitude, \n",
    "   melbourne_longitude, \n",
    "    radius, \n",
    "    LIMIT)\n",
    "\n",
    "url \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'meta': {'code': 200, 'requestId': '5edf71971e152c001bc89ff2'},\n",
       " 'response': {'suggestedFilters': {'header': 'Tap to show:',\n",
       "   'filters': [{'name': 'Open now', 'key': 'openNow'}]},\n",
       "  'headerLocation': 'Current map view',\n",
       "  'headerFullLocation': 'Current map view',\n",
       "  'headerLocationGranularity': 'unknown',\n",
       "  'totalResults': 23,\n",
       "  'suggestedBounds': {'ne': {'lat': -37.886415990999986,\n",
       "    'lng': 145.03279563539405},\n",
       "   'sw': {'lat': -37.90441600900001, 'lng': 145.01002836460594}},\n",
       "  'groups': [{'type': 'Recommended Places',\n",
       "    'name': 'recommended',\n",
       "    'items': [{'reasons': {'count': 0,\n",
       "       'items': [{'summary': 'This spot is popular',\n",
       "         'type': 'general',\n",
       "         'reasonName': 'globalInteractionReason'}]},\n",
       "      'venue': {'id': '4bf890244a67c928fbaf25cf',\n",
       "       'name': 'Princes Park',\n",
       "       'location': {'address': 'Bambra Road',\n",
       "        'lat': -37.89376085510016,\n",
       "        'lng': 145.02456990726105,\n",
       "        'labeledLatLngs': [{'label': 'display',\n",
       "          'lat': -37.89376085510016,\n",
       "          'lng': 145.02456990726105}],\n",
       "        'distance': 333,\n",
       "        'cc': 'AU',\n",
       "        'city': 'Caulfield South',\n",
       "        'state': 'VIC',\n",
       "        'country': 'Australia',\n",
       "        'formattedAddress': ['Bambra Road',\n",
       "         'Caulfield South VIC',\n",
       "         'Australia']},\n",
       "       'categories': [{'id': '4bf58dd8d48988d162941735',\n",
       "         'name': 'Other Great Outdoors',\n",
       "         'pluralName': 'Other Great Outdoors',\n",
       "         'shortName': 'Other Outdoors',\n",
       "         'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/parks_outdoors/outdoors_',\n",
       "          'suffix': '.png'},\n",
       "         'primary': True}],\n",
       "       'photos': {'count': 0, 'groups': []}},\n",
       "      'referralId': 'e-0-4bf890244a67c928fbaf25cf-0'},\n",
       "     {'reasons': {'count': 0,\n",
       "       'items': [{'summary': 'This spot is popular',\n",
       "         'type': 'general',\n",
       "         'reasonName': 'globalInteractionReason'}]},\n",
       "      'venue': {'id': '4b2720b5f964a520d78424e3',\n",
       "       'name': \"Cafe D'lish\",\n",
       "       'location': {'address': '269 Bambra Rd.',\n",
       "        'lat': -37.89237375834246,\n",
       "        'lng': 145.02777014253465,\n",
       "        'labeledLatLngs': [{'label': 'display',\n",
       "          'lat': -37.89237375834246,\n",
       "          'lng': 145.02777014253465}],\n",
       "        'distance': 653,\n",
       "        'postalCode': '3162',\n",
       "        'cc': 'AU',\n",
       "        'city': 'Caulfield South',\n",
       "        'state': 'VIC',\n",
       "        'country': 'Australia',\n",
       "        'formattedAddress': ['269 Bambra Rd.',\n",
       "         'Caulfield South VIC 3162',\n",
       "         'Australia']},\n",
       "       'categories': [{'id': '4bf58dd8d48988d146941735',\n",
       "         'name': 'Deli / Bodega',\n",
       "         'pluralName': 'Delis / Bodegas',\n",
       "         'shortName': 'Deli / Bodega',\n",
       "         'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/food/deli_',\n",
       "          'suffix': '.png'},\n",
       "         'primary': True}],\n",
       "       'photos': {'count': 0, 'groups': []}},\n",
       "      'referralId': 'e-0-4b2720b5f964a520d78424e3-1'},\n",
       "     {'reasons': {'count': 0,\n",
       "       'items': [{'summary': 'This spot is popular',\n",
       "         'type': 'general',\n",
       "         'reasonName': 'globalInteractionReason'}]},\n",
       "      'venue': {'id': '4b05874cf964a520fe8922e3',\n",
       "       'name': 'Bombay by Night',\n",
       "       'location': {'address': '355 North Rd.',\n",
       "        'lat': -37.90221,\n",
       "        'lng': 145.0284,\n",
       "        'labeledLatLngs': [{'label': 'display',\n",
       "          'lat': -37.90221,\n",
       "          'lng': 145.0284}],\n",
       "        'distance': 974,\n",
       "        'postalCode': '3162',\n",
       "        'cc': 'AU',\n",
       "        'city': 'Ormond',\n",
       "        'state': 'VIC',\n",
       "        'country': 'Australia',\n",
       "        'formattedAddress': ['355 North Rd.', 'Ormond VIC 3162', 'Australia']},\n",
       "       'categories': [{'id': '4bf58dd8d48988d10f941735',\n",
       "         'name': 'Indian Restaurant',\n",
       "         'pluralName': 'Indian Restaurants',\n",
       "         'shortName': 'Indian',\n",
       "         'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/food/indian_',\n",
       "          'suffix': '.png'},\n",
       "         'primary': True}],\n",
       "       'photos': {'count': 0, 'groups': []}},\n",
       "      'referralId': 'e-0-4b05874cf964a520fe8922e3-2'},\n",
       "     {'reasons': {'count': 0,\n",
       "       'items': [{'summary': 'This spot is popular',\n",
       "         'type': 'general',\n",
       "         'reasonName': 'globalInteractionReason'}]},\n",
       "      'venue': {'id': '4e9b5733d3e3697fc03256c1',\n",
       "       'name': 'Forth Brother',\n",
       "       'location': {'address': '779 Glenhuntly Rd',\n",
       "        'crossStreet': 'Hawthorn Rd',\n",
       "        'lat': -37.8867,\n",
       "        'lng': 145.02153,\n",
       "        'labeledLatLngs': [{'label': 'display',\n",
       "          'lat': -37.8867,\n",
       "          'lng': 145.02153}],\n",
       "        'distance': 970,\n",
       "        'postalCode': '3162',\n",
       "        'cc': 'AU',\n",
       "        'city': 'Caulfield South',\n",
       "        'state': 'VIC',\n",
       "        'country': 'Australia',\n",
       "        'formattedAddress': ['779 Glenhuntly Rd (Hawthorn Rd)',\n",
       "         'Caulfield South VIC 3162',\n",
       "         'Australia']},\n",
       "       'categories': [{'id': '4bf58dd8d48988d16d941735',\n",
       "         'name': 'Café',\n",
       "         'pluralName': 'Cafés',\n",
       "         'shortName': 'Café',\n",
       "         'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/food/cafe_',\n",
       "          'suffix': '.png'},\n",
       "         'primary': True}],\n",
       "       'photos': {'count': 0, 'groups': []}},\n",
       "      'referralId': 'e-0-4e9b5733d3e3697fc03256c1-3'},\n",
       "     {'reasons': {'count': 0,\n",
       "       'items': [{'summary': 'This spot is popular',\n",
       "         'type': 'general',\n",
       "         'reasonName': 'globalInteractionReason'}]},\n",
       "      'venue': {'id': '4b7d217ef964a5209caf2fe3',\n",
       "       'name': 'Zest in Food',\n",
       "       'location': {'address': '59 Landcox St.',\n",
       "        'lat': -37.90276,\n",
       "        'lng': 145.01491,\n",
       "        'labeledLatLngs': [{'label': 'display',\n",
       "          'lat': -37.90276,\n",
       "          'lng': 145.01491}],\n",
       "        'distance': 997,\n",
       "        'postalCode': '3187',\n",
       "        'cc': 'AU',\n",
       "        'city': 'Brighton East',\n",
       "        'state': 'VIC',\n",
       "        'country': 'Australia',\n",
       "        'formattedAddress': ['59 Landcox St.',\n",
       "         'Brighton East VIC 3187',\n",
       "         'Australia']},\n",
       "       'categories': [{'id': '4bf58dd8d48988d16d941735',\n",
       "         'name': 'Café',\n",
       "         'pluralName': 'Cafés',\n",
       "         'shortName': 'Café',\n",
       "         'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/food/cafe_',\n",
       "          'suffix': '.png'},\n",
       "         'primary': True}],\n",
       "       'photos': {'count': 0, 'groups': []}},\n",
       "      'referralId': 'e-0-4b7d217ef964a5209caf2fe3-4'},\n",
       "     {'reasons': {'count': 0,\n",
       "       'items': [{'summary': 'This spot is popular',\n",
       "         'type': 'general',\n",
       "         'reasonName': 'globalInteractionReason'}]},\n",
       "      'venue': {'id': '4b6a7206f964a5207fd52be3',\n",
       "       'name': 'IGA X-press Caulfield',\n",
       "       'location': {'address': 'North Road',\n",
       "        'crossStreet': 'at North Rd.',\n",
       "        'lat': -37.901098,\n",
       "        'lng': 145.019062,\n",
       "        'labeledLatLngs': [{'label': 'display',\n",
       "          'lat': -37.901098,\n",
       "          'lng': 145.019062}],\n",
       "        'distance': 665,\n",
       "        'postalCode': '3162',\n",
       "        'cc': 'AU',\n",
       "        'city': 'Caulfield South',\n",
       "        'state': 'VIC',\n",
       "        'country': 'Australia',\n",
       "        'formattedAddress': ['North Road (at North Rd.)',\n",
       "         'Caulfield South VIC 3162',\n",
       "         'Australia']},\n",
       "       'categories': [{'id': '4bf58dd8d48988d118951735',\n",
       "         'name': 'Grocery Store',\n",
       "         'pluralName': 'Grocery Stores',\n",
       "         'shortName': 'Grocery Store',\n",
       "         'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/shops/food_grocery_',\n",
       "          'suffix': '.png'},\n",
       "         'primary': True}],\n",
       "       'photos': {'count': 0, 'groups': []},\n",
       "       'venuePage': {'id': '578793290'}},\n",
       "      'referralId': 'e-0-4b6a7206f964a5207fd52be3-5'},\n",
       "     {'reasons': {'count': 0,\n",
       "       'items': [{'summary': 'This spot is popular',\n",
       "         'type': 'general',\n",
       "         'reasonName': 'globalInteractionReason'}]},\n",
       "      'venue': {'id': '4c393a9aae2da593f04702c6',\n",
       "       'name': 'London Tavern',\n",
       "       'location': {'address': '414 Hawthorn Road',\n",
       "        'lat': -37.88963956335763,\n",
       "        'lng': 145.02133380122677,\n",
       "        'labeledLatLngs': [{'label': 'display',\n",
       "          'lat': -37.88963956335763,\n",
       "          'lng': 145.02133380122677}],\n",
       "        'distance': 643,\n",
       "        'cc': 'AU',\n",
       "        'city': 'Caulfield South',\n",
       "        'state': 'VIC',\n",
       "        'country': 'Australia',\n",
       "        'formattedAddress': ['414 Hawthorn Road',\n",
       "         'Caulfield South VIC',\n",
       "         'Australia']},\n",
       "       'categories': [{'id': '4bf58dd8d48988d11b941735',\n",
       "         'name': 'Pub',\n",
       "         'pluralName': 'Pubs',\n",
       "         'shortName': 'Pub',\n",
       "         'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/nightlife/pub_',\n",
       "          'suffix': '.png'},\n",
       "         'primary': True}],\n",
       "       'photos': {'count': 0, 'groups': []}},\n",
       "      'referralId': 'e-0-4c393a9aae2da593f04702c6-6'},\n",
       "     {'reasons': {'count': 0,\n",
       "       'items': [{'summary': 'This spot is popular',\n",
       "         'type': 'general',\n",
       "         'reasonName': 'globalInteractionReason'}]},\n",
       "      'venue': {'id': '4c1c26f08b3aa593ef7e985f',\n",
       "       'name': 'South African Store',\n",
       "       'location': {'address': '461 Hawthorn Rd.',\n",
       "        'lat': -37.89411,\n",
       "        'lng': 145.02083,\n",
       "        'labeledLatLngs': [{'label': 'display',\n",
       "          'lat': -37.89411,\n",
       "          'lng': 145.02083}],\n",
       "        'distance': 154,\n",
       "        'cc': 'AU',\n",
       "        'city': 'Caulfield South',\n",
       "        'state': 'VIC',\n",
       "        'country': 'Australia',\n",
       "        'formattedAddress': ['461 Hawthorn Rd.',\n",
       "         'Caulfield South VIC',\n",
       "         'Australia']},\n",
       "       'categories': [{'id': '4bf58dd8d48988d1ff941735',\n",
       "         'name': 'Miscellaneous Shop',\n",
       "         'pluralName': 'Miscellaneous Shops',\n",
       "         'shortName': 'Shop',\n",
       "         'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/shops/default_',\n",
       "          'suffix': '.png'},\n",
       "         'primary': True}],\n",
       "       'photos': {'count': 0, 'groups': []}},\n",
       "      'referralId': 'e-0-4c1c26f08b3aa593ef7e985f-7'},\n",
       "     {'reasons': {'count': 0,\n",
       "       'items': [{'summary': 'This spot is popular',\n",
       "         'type': 'general',\n",
       "         'reasonName': 'globalInteractionReason'}]},\n",
       "      'venue': {'id': '4c099e53340720a17f2a8593',\n",
       "       'name': 'Caulfield YMCA',\n",
       "       'location': {'address': '6 maple street',\n",
       "        'lat': -37.89374,\n",
       "        'lng': 145.0215,\n",
       "        'labeledLatLngs': [{'label': 'display',\n",
       "          'lat': -37.89374,\n",
       "          'lng': 145.0215}],\n",
       "        'distance': 186,\n",
       "        'postalCode': '3162',\n",
       "        'cc': 'AU',\n",
       "        'city': 'Caulfield South',\n",
       "        'state': 'VIC',\n",
       "        'country': 'Australia',\n",
       "        'formattedAddress': ['6 maple street',\n",
       "         'Caulfield South VIC 3162',\n",
       "         'Australia']},\n",
       "       'categories': [{'id': '4bf58dd8d48988d176941735',\n",
       "         'name': 'Gym',\n",
       "         'pluralName': 'Gyms',\n",
       "         'shortName': 'Gym',\n",
       "         'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/building/gym_',\n",
       "          'suffix': '.png'},\n",
       "         'primary': True}],\n",
       "       'photos': {'count': 0, 'groups': []}},\n",
       "      'referralId': 'e-0-4c099e53340720a17f2a8593-8'},\n",
       "     {'reasons': {'count': 0,\n",
       "       'items': [{'summary': 'This spot is popular',\n",
       "         'type': 'general',\n",
       "         'reasonName': 'globalInteractionReason'}]},\n",
       "      'venue': {'id': '4b86284ff964a520658131e3',\n",
       "       'name': 'Tram Stop 63',\n",
       "       'location': {'address': 'Hawthorn Rd',\n",
       "        'crossStreet': 'North Rd',\n",
       "        'lat': -37.90153234861976,\n",
       "        'lng': 145.0194143734164,\n",
       "        'labeledLatLngs': [{'label': 'display',\n",
       "          'lat': -37.90153234861976,\n",
       "          'lng': 145.0194143734164}],\n",
       "        'distance': 703,\n",
       "        'cc': 'AU',\n",
       "        'city': 'Caulfield South',\n",
       "        'state': 'VIC',\n",
       "        'country': 'Australia',\n",
       "        'formattedAddress': ['Hawthorn Rd (North Rd)',\n",
       "         'Caulfield South VIC',\n",
       "         'Australia']},\n",
       "       'categories': [{'id': '4bf58dd8d48988d1fc931735',\n",
       "         'name': 'Light Rail Station',\n",
       "         'pluralName': 'Light Rail Stations',\n",
       "         'shortName': 'Light Rail',\n",
       "         'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/travel/lightrail_',\n",
       "          'suffix': '.png'},\n",
       "         'primary': True}],\n",
       "       'photos': {'count': 0, 'groups': []}},\n",
       "      'referralId': 'e-0-4b86284ff964a520658131e3-9'},\n",
       "     {'reasons': {'count': 0,\n",
       "       'items': [{'summary': 'This spot is popular',\n",
       "         'type': 'general',\n",
       "         'reasonName': 'globalInteractionReason'}]},\n",
       "      'venue': {'id': '4b5d3d8ff964a520835729e3',\n",
       "       'name': 'Ian Marks Liquor Store',\n",
       "       'location': {'address': 'North Rd.',\n",
       "        'crossStreet': 'at Bambara Rd.',\n",
       "        'lat': -37.902116,\n",
       "        'lng': 145.02651803,\n",
       "        'labeledLatLngs': [{'label': 'display',\n",
       "          'lat': -37.902116,\n",
       "          'lng': 145.02651803}],\n",
       "        'distance': 870,\n",
       "        'cc': 'AU',\n",
       "        'city': 'Ormond',\n",
       "        'state': 'VIC',\n",
       "        'country': 'Australia',\n",
       "        'formattedAddress': ['North Rd. (at Bambara Rd.)',\n",
       "         'Ormond VIC',\n",
       "         'Australia']},\n",
       "       'categories': [{'id': '4bf58dd8d48988d186941735',\n",
       "         'name': 'Liquor Store',\n",
       "         'pluralName': 'Liquor Stores',\n",
       "         'shortName': 'Liquor Store',\n",
       "         'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/shops/food_liquor_',\n",
       "          'suffix': '.png'},\n",
       "         'primary': True}],\n",
       "       'photos': {'count': 0, 'groups': []}},\n",
       "      'referralId': 'e-0-4b5d3d8ff964a520835729e3-10'},\n",
       "     {'reasons': {'count': 0,\n",
       "       'items': [{'summary': 'This spot is popular',\n",
       "         'type': 'general',\n",
       "         'reasonName': 'globalInteractionReason'}]},\n",
       "      'venue': {'id': '4d01d7c018ff8cfa4f40c157',\n",
       "       'name': 'Batter Up Fish And Chips',\n",
       "       'location': {'address': '816-818 Glen Huntly Rd.',\n",
       "        'lat': -37.88722,\n",
       "        'lng': 145.0231,\n",
       "        'labeledLatLngs': [{'label': 'display',\n",
       "          'lat': -37.88722,\n",
       "          'lng': 145.0231}],\n",
       "        'distance': 924,\n",
       "        'postalCode': '3162',\n",
       "        'cc': 'AU',\n",
       "        'city': 'Caulfield South',\n",
       "        'state': 'VIC',\n",
       "        'country': 'Australia',\n",
       "        'formattedAddress': ['816-818 Glen Huntly Rd.',\n",
       "         'Caulfield South VIC 3162',\n",
       "         'Australia']},\n",
       "       'categories': [{'id': '4edd64a0c7ddd24ca188df1a',\n",
       "         'name': 'Fish & Chips Shop',\n",
       "         'pluralName': 'Fish & Chips Shops',\n",
       "         'shortName': 'Fish & Chips',\n",
       "         'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/food/fishandchips_',\n",
       "          'suffix': '.png'},\n",
       "         'primary': True}],\n",
       "       'photos': {'count': 0, 'groups': []}},\n",
       "      'referralId': 'e-0-4d01d7c018ff8cfa4f40c157-11'},\n",
       "     {'reasons': {'count': 0,\n",
       "       'items': [{'summary': 'This spot is popular',\n",
       "         'type': 'general',\n",
       "         'reasonName': 'globalInteractionReason'}]},\n",
       "      'venue': {'id': '4ce594cb948f224ba2dade5d',\n",
       "       'name': 'Tram Stop 51 (67)',\n",
       "       'location': {'address': 'Glenhuntly Road',\n",
       "        'crossStreet': 'at Hawthorn Road',\n",
       "        'lat': -37.88691204237936,\n",
       "        'lng': 145.02195596694946,\n",
       "        'labeledLatLngs': [{'label': 'display',\n",
       "          'lat': -37.88691204237936,\n",
       "          'lng': 145.02195596694946}],\n",
       "        'distance': 947,\n",
       "        'cc': 'AU',\n",
       "        'city': 'Caulfield',\n",
       "        'state': 'VIC',\n",
       "        'country': 'Australia',\n",
       "        'formattedAddress': ['Glenhuntly Road (at Hawthorn Road)',\n",
       "         'Caulfield VIC',\n",
       "         'Australia']},\n",
       "       'categories': [{'id': '4bf58dd8d48988d1fc931735',\n",
       "         'name': 'Light Rail Station',\n",
       "         'pluralName': 'Light Rail Stations',\n",
       "         'shortName': 'Light Rail',\n",
       "         'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/travel/lightrail_',\n",
       "          'suffix': '.png'},\n",
       "         'primary': True}],\n",
       "       'photos': {'count': 0, 'groups': []}},\n",
       "      'referralId': 'e-0-4ce594cb948f224ba2dade5d-12'},\n",
       "     {'reasons': {'count': 0,\n",
       "       'items': [{'summary': 'This spot is popular',\n",
       "         'type': 'general',\n",
       "         'reasonName': 'globalInteractionReason'}]},\n",
       "      'venue': {'id': '4c3cf89ea97bbe9a5445fbdd',\n",
       "       'name': 'Bodhi Kitchen',\n",
       "       'location': {'address': '766 Glenhuntly Road',\n",
       "        'lat': -37.886845496473214,\n",
       "        'lng': 145.02203515349171,\n",
       "        'labeledLatLngs': [{'label': 'display',\n",
       "          'lat': -37.886845496473214,\n",
       "          'lng': 145.02203515349171}],\n",
       "        'distance': 955,\n",
       "        'postalCode': '3162',\n",
       "        'cc': 'AU',\n",
       "        'city': 'Caulfield South',\n",
       "        'state': 'VIC',\n",
       "        'country': 'Australia',\n",
       "        'formattedAddress': ['766 Glenhuntly Road',\n",
       "         'Caulfield South VIC 3162',\n",
       "         'Australia']},\n",
       "       'categories': [{'id': '4bf58dd8d48988d118951735',\n",
       "         'name': 'Grocery Store',\n",
       "         'pluralName': 'Grocery Stores',\n",
       "         'shortName': 'Grocery Store',\n",
       "         'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/shops/food_grocery_',\n",
       "          'suffix': '.png'},\n",
       "         'primary': True}],\n",
       "       'photos': {'count': 0, 'groups': []}},\n",
       "      'referralId': 'e-0-4c3cf89ea97bbe9a5445fbdd-13'},\n",
       "     {'reasons': {'count': 0,\n",
       "       'items': [{'summary': 'This spot is popular',\n",
       "         'type': 'general',\n",
       "         'reasonName': 'globalInteractionReason'}]},\n",
       "      'venue': {'id': '4b9b2c48f964a520b9f735e3',\n",
       "       'name': 'video busters',\n",
       "       'location': {'address': '774-776 Glenhuntly road',\n",
       "        'lat': -37.88679541697591,\n",
       "        'lng': 145.02086736259213,\n",
       "        'labeledLatLngs': [{'label': 'display',\n",
       "          'lat': -37.88679541697591,\n",
       "          'lng': 145.02086736259213}],\n",
       "        'distance': 960,\n",
       "        'cc': 'AU',\n",
       "        'city': 'Caulfield',\n",
       "        'state': 'VIC',\n",
       "        'country': 'Australia',\n",
       "        'formattedAddress': ['774-776 Glenhuntly road',\n",
       "         'Caulfield VIC',\n",
       "         'Australia']},\n",
       "       'categories': [{'id': '4bf58dd8d48988d126951735',\n",
       "         'name': 'Video Store',\n",
       "         'pluralName': 'Video Stores',\n",
       "         'shortName': 'Video Store',\n",
       "         'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/shops/video_',\n",
       "          'suffix': '.png'},\n",
       "         'primary': True}],\n",
       "       'photos': {'count': 0, 'groups': []}},\n",
       "      'referralId': 'e-0-4b9b2c48f964a520b9f735e3-14'},\n",
       "     {'reasons': {'count': 0,\n",
       "       'items': [{'summary': 'This spot is popular',\n",
       "         'type': 'general',\n",
       "         'reasonName': 'globalInteractionReason'}]},\n",
       "      'venue': {'id': '4be4929c910020a117e9d114',\n",
       "       'name': 'Xpose Cafe',\n",
       "       'location': {'address': 'Glen Huntly Road',\n",
       "        'lat': -37.886760529173486,\n",
       "        'lng': 145.02126021210645,\n",
       "        'labeledLatLngs': [{'label': 'display',\n",
       "          'lat': -37.886760529173486,\n",
       "          'lng': 145.02126021210645}],\n",
       "        'distance': 963,\n",
       "        'cc': 'AU',\n",
       "        'city': 'Caulfield',\n",
       "        'state': 'VIC',\n",
       "        'country': 'Australia',\n",
       "        'formattedAddress': ['Glen Huntly Road',\n",
       "         'Caulfield VIC',\n",
       "         'Australia']},\n",
       "       'categories': [{'id': '4bf58dd8d48988d16d941735',\n",
       "         'name': 'Café',\n",
       "         'pluralName': 'Cafés',\n",
       "         'shortName': 'Café',\n",
       "         'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/food/cafe_',\n",
       "          'suffix': '.png'},\n",
       "         'primary': True}],\n",
       "       'photos': {'count': 0, 'groups': []}},\n",
       "      'referralId': 'e-0-4be4929c910020a117e9d114-15'},\n",
       "     {'reasons': {'count': 0,\n",
       "       'items': [{'summary': 'This spot is popular',\n",
       "         'type': 'general',\n",
       "         'reasonName': 'globalInteractionReason'}]},\n",
       "      'venue': {'id': '4b735c5ff964a520a4aa2de3',\n",
       "       'name': 'Chooks Corner',\n",
       "       'location': {'address': '791 Glen Huntly Rd.',\n",
       "        'crossStreet': 'at Hawthorn Rd.',\n",
       "        'lat': -37.886751160482,\n",
       "        'lng': 145.0218540430069,\n",
       "        'labeledLatLngs': [{'label': 'display',\n",
       "          'lat': -37.886751160482,\n",
       "          'lng': 145.0218540430069}],\n",
       "        'distance': 965,\n",
       "        'postalCode': '3162',\n",
       "        'cc': 'AU',\n",
       "        'city': 'Caulfield',\n",
       "        'state': 'VIC',\n",
       "        'country': 'Australia',\n",
       "        'formattedAddress': ['791 Glen Huntly Rd. (at Hawthorn Rd.)',\n",
       "         'Caulfield VIC 3162',\n",
       "         'Australia']},\n",
       "       'categories': [{'id': '4bf58dd8d48988d16e941735',\n",
       "         'name': 'Fast Food Restaurant',\n",
       "         'pluralName': 'Fast Food Restaurants',\n",
       "         'shortName': 'Fast Food',\n",
       "         'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/food/fastfood_',\n",
       "          'suffix': '.png'},\n",
       "         'primary': True}],\n",
       "       'photos': {'count': 0, 'groups': []}},\n",
       "      'referralId': 'e-0-4b735c5ff964a520a4aa2de3-16'},\n",
       "     {'reasons': {'count': 0,\n",
       "       'items': [{'summary': 'This spot is popular',\n",
       "         'type': 'general',\n",
       "         'reasonName': 'globalInteractionReason'}]},\n",
       "      'venue': {'id': '4badc228f964a52067673be3',\n",
       "       'name': 'Matsuzaka',\n",
       "       'location': {'lat': -37.88680276548788,\n",
       "        'lng': 145.02276704910574,\n",
       "        'labeledLatLngs': [{'label': 'display',\n",
       "          'lat': -37.88680276548788,\n",
       "          'lng': 145.02276704910574}],\n",
       "        'distance': 966,\n",
       "        'cc': 'AU',\n",
       "        'country': 'Australia',\n",
       "        'formattedAddress': ['Australia']},\n",
       "       'categories': [{'id': '4bf58dd8d48988d111941735',\n",
       "         'name': 'Japanese Restaurant',\n",
       "         'pluralName': 'Japanese Restaurants',\n",
       "         'shortName': 'Japanese',\n",
       "         'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/food/japanese_',\n",
       "          'suffix': '.png'},\n",
       "         'primary': True}],\n",
       "       'photos': {'count': 0, 'groups': []}},\n",
       "      'referralId': 'e-0-4badc228f964a52067673be3-17'},\n",
       "     {'reasons': {'count': 0,\n",
       "       'items': [{'summary': 'This spot is popular',\n",
       "         'type': 'general',\n",
       "         'reasonName': 'globalInteractionReason'}]},\n",
       "      'venue': {'id': '4b6cdec1f964a520835a2ce3',\n",
       "       'name': 'Urban Thai',\n",
       "       'location': {'address': '720 Glen Huntly Rd',\n",
       "        'lat': -37.88677,\n",
       "        'lng': 145.01969,\n",
       "        'labeledLatLngs': [{'label': 'display',\n",
       "          'lat': -37.88677,\n",
       "          'lng': 145.01969}],\n",
       "        'distance': 974,\n",
       "        'postalCode': '3122',\n",
       "        'cc': 'AU',\n",
       "        'city': 'Caulfield South',\n",
       "        'state': 'VIC',\n",
       "        'country': 'Australia',\n",
       "        'formattedAddress': ['720 Glen Huntly Rd',\n",
       "         'Caulfield South VIC 3122',\n",
       "         'Australia']},\n",
       "       'categories': [{'id': '4bf58dd8d48988d149941735',\n",
       "         'name': 'Thai Restaurant',\n",
       "         'pluralName': 'Thai Restaurants',\n",
       "         'shortName': 'Thai',\n",
       "         'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/food/thai_',\n",
       "          'suffix': '.png'},\n",
       "         'primary': True}],\n",
       "       'photos': {'count': 0, 'groups': []}},\n",
       "      'referralId': 'e-0-4b6cdec1f964a520835a2ce3-18'},\n",
       "     {'reasons': {'count': 0,\n",
       "       'items': [{'summary': 'This spot is popular',\n",
       "         'type': 'general',\n",
       "         'reasonName': 'globalInteractionReason'}]},\n",
       "      'venue': {'id': '4e142177b61c18a826fedd73',\n",
       "       'name': 'Falafel Omisi',\n",
       "       'location': {'address': '359 Hawthorn Road',\n",
       "        'lat': -37.88665,\n",
       "        'lng': 145.0222,\n",
       "        'labeledLatLngs': [{'label': 'display',\n",
       "          'lat': -37.88665,\n",
       "          'lng': 145.0222}],\n",
       "        'distance': 978,\n",
       "        'postalCode': '3162',\n",
       "        'cc': 'AU',\n",
       "        'city': 'Caulfield',\n",
       "        'state': 'VIC',\n",
       "        'country': 'Australia',\n",
       "        'formattedAddress': ['359 Hawthorn Road',\n",
       "         'Caulfield VIC 3162',\n",
       "         'Australia']},\n",
       "       'categories': [{'id': '4bf58dd8d48988d10b941735',\n",
       "         'name': 'Falafel Restaurant',\n",
       "         'pluralName': 'Falafel Restaurants',\n",
       "         'shortName': 'Falafel',\n",
       "         'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/food/falafel_',\n",
       "          'suffix': '.png'},\n",
       "         'primary': True}],\n",
       "       'photos': {'count': 0, 'groups': []}},\n",
       "      'referralId': 'e-0-4e142177b61c18a826fedd73-19'},\n",
       "     {'reasons': {'count': 0,\n",
       "       'items': [{'summary': 'This spot is popular',\n",
       "         'type': 'general',\n",
       "         'reasonName': 'globalInteractionReason'}]},\n",
       "      'venue': {'id': '55e2c13e498e758dcab7b899',\n",
       "       'name': 'Direct Speech',\n",
       "       'location': {'address': '10 Spring Road',\n",
       "        'lat': -37.90142,\n",
       "        'lng': 145.02957,\n",
       "        'labeledLatLngs': [{'label': 'display',\n",
       "          'lat': -37.90142,\n",
       "          'lng': 145.02957}],\n",
       "        'distance': 979,\n",
       "        'postalCode': '3162',\n",
       "        'cc': 'AU',\n",
       "        'city': 'Caulfield South',\n",
       "        'state': 'VIC',\n",
       "        'country': 'Australia',\n",
       "        'formattedAddress': ['10 Spring Road',\n",
       "         'Caulfield South VIC 3162',\n",
       "         'Australia']},\n",
       "       'categories': [{'id': '5453de49498eade8af355881',\n",
       "         'name': 'Business Service',\n",
       "         'pluralName': 'Business Services',\n",
       "         'shortName': 'Business Services',\n",
       "         'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/building/default_',\n",
       "          'suffix': '.png'},\n",
       "         'primary': True}],\n",
       "       'photos': {'count': 0, 'groups': []},\n",
       "       'venuePage': {'id': '562630557'}},\n",
       "      'referralId': 'e-0-55e2c13e498e758dcab7b899-20'},\n",
       "     {'reasons': {'count': 0,\n",
       "       'items': [{'summary': 'This spot is popular',\n",
       "         'type': 'general',\n",
       "         'reasonName': 'globalInteractionReason'}]},\n",
       "      'venue': {'id': '4e43a3fa1838e44e89820366',\n",
       "       'name': 'Portofino Pizza',\n",
       "       'location': {'address': '884 Glenhuntly Rd',\n",
       "        'lat': -37.88767,\n",
       "        'lng': 145.0268,\n",
       "        'labeledLatLngs': [{'label': 'display',\n",
       "          'lat': -37.88767,\n",
       "          'lng': 145.0268}],\n",
       "        'distance': 983,\n",
       "        'cc': 'AU',\n",
       "        'city': 'Caulfield South',\n",
       "        'state': 'VIC',\n",
       "        'country': 'Australia',\n",
       "        'formattedAddress': ['884 Glenhuntly Rd',\n",
       "         'Caulfield South VIC',\n",
       "         'Australia']},\n",
       "       'categories': [{'id': '4bf58dd8d48988d1ca941735',\n",
       "         'name': 'Pizza Place',\n",
       "         'pluralName': 'Pizza Places',\n",
       "         'shortName': 'Pizza',\n",
       "         'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/food/pizza_',\n",
       "          'suffix': '.png'},\n",
       "         'primary': True}],\n",
       "       'photos': {'count': 0, 'groups': []}},\n",
       "      'referralId': 'e-0-4e43a3fa1838e44e89820366-21'},\n",
       "     {'reasons': {'count': 0,\n",
       "       'items': [{'summary': 'This spot is popular',\n",
       "         'type': 'general',\n",
       "         'reasonName': 'globalInteractionReason'}]},\n",
       "      'venue': {'id': '4c821f2774d7b60c7a1f7dd8',\n",
       "       'name': 'Grill Danube',\n",
       "       'location': {'address': '729 Glen Huntly Rd.',\n",
       "        'lat': -37.88649,\n",
       "        'lng': 145.0201,\n",
       "        'labeledLatLngs': [{'label': 'display',\n",
       "          'lat': -37.88649,\n",
       "          'lng': 145.0201}],\n",
       "        'distance': 1000,\n",
       "        'postalCode': '3162',\n",
       "        'cc': 'AU',\n",
       "        'city': 'Caulfield',\n",
       "        'state': 'VIC',\n",
       "        'country': 'Australia',\n",
       "        'formattedAddress': ['729 Glen Huntly Rd.',\n",
       "         'Caulfield VIC 3162',\n",
       "         'Australia']},\n",
       "       'categories': [{'id': '4bf58dd8d48988d109941735',\n",
       "         'name': 'Eastern European Restaurant',\n",
       "         'pluralName': 'Eastern European Restaurants',\n",
       "         'shortName': 'Eastern European',\n",
       "         'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/food/default_',\n",
       "          'suffix': '.png'},\n",
       "         'primary': True}],\n",
       "       'photos': {'count': 0, 'groups': []}},\n",
       "      'referralId': 'e-0-4c821f2774d7b60c7a1f7dd8-22'}]}]}}"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = requests.get(url).json()\n",
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function that extracts the category of the venue\n",
    "def get_category_type(row):\n",
    "    try:\n",
    "        categories_list = row['categories']\n",
    "    except:\n",
    "        categories_list = row['venue.categories']\n",
    "        \n",
    "    if len(categories_list) == 0:\n",
    "        return None\n",
    "    else:\n",
    "        return categories_list[0]['name']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Aldy/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:3: FutureWarning: pandas.io.json.json_normalize is deprecated, use pandas.json_normalize instead\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>categories</th>\n",
       "      <th>lat</th>\n",
       "      <th>lng</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Princes Park</td>\n",
       "      <td>Other Great Outdoors</td>\n",
       "      <td>-37.893761</td>\n",
       "      <td>145.02457</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Cafe D'lish</td>\n",
       "      <td>Deli / Bodega</td>\n",
       "      <td>-37.892374</td>\n",
       "      <td>145.02777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Bombay by Night</td>\n",
       "      <td>Indian Restaurant</td>\n",
       "      <td>-37.902210</td>\n",
       "      <td>145.02840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Forth Brother</td>\n",
       "      <td>Café</td>\n",
       "      <td>-37.886700</td>\n",
       "      <td>145.02153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Zest in Food</td>\n",
       "      <td>Café</td>\n",
       "      <td>-37.902760</td>\n",
       "      <td>145.01491</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              name            categories        lat        lng\n",
       "0     Princes Park  Other Great Outdoors -37.893761  145.02457\n",
       "1      Cafe D'lish         Deli / Bodega -37.892374  145.02777\n",
       "2  Bombay by Night     Indian Restaurant -37.902210  145.02840\n",
       "3    Forth Brother                  Café -37.886700  145.02153\n",
       "4     Zest in Food                  Café -37.902760  145.01491"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "venues = results['response']['groups'][0]['items']\n",
    "    \n",
    "nearby_venues = json_normalize(venues) # flatten JSON\n",
    "\n",
    "# filter columns\n",
    "filtered_columns = ['venue.name', 'venue.categories', 'venue.location.lat', 'venue.location.lng']\n",
    "nearby_venues =nearby_venues.loc[:, filtered_columns]\n",
    "\n",
    "# filter the category for each row\n",
    "nearby_venues['venue.categories'] = nearby_venues.apply(get_category_type, axis=1)\n",
    "\n",
    "# clean columns\n",
    "nearby_venues.columns = [col.split(\".\")[-1] for col in nearby_venues.columns]\n",
    "\n",
    "nearby_venues.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23 venues were returned by Foursquare.\n"
     ]
    }
   ],
   "source": [
    "print('{} venues were returned by Foursquare.'.format(nearby_venues.shape[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "def getNearbyVenues(names, latitudes, longitudes, radius=1000):\n",
    "    \n",
    "    venues_list=[]\n",
    "    for name, lat, lng in zip(names, latitudes, longitudes):\n",
    "        #print(name)\n",
    "            \n",
    "        # create the API request URL\n",
    "        url = 'https://api.foursquare.com/v2/venues/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(\n",
    "            CLIENT_ID, \n",
    "            CLIENT_SECRET, \n",
    "            VERSION, \n",
    "            lat, \n",
    "            lng, \n",
    "            radius, \n",
    "            LIMIT)\n",
    "            \n",
    "        # make the GET request\n",
    "        results = requests.get(url).json()[\"response\"]['groups'][0]['items']\n",
    "        \n",
    "        # return only relevant information for each nearby venue\n",
    "        venues_list.append([(\n",
    "            name, \n",
    "            lat, \n",
    "            lng, \n",
    "            v['venue']['name'],\n",
    "            v['venue']['id'],\n",
    "            v['venue']['location']['lat'], \n",
    "            v['venue']['location']['lng'],  \n",
    "            v['venue']['categories'][0]['name']) for v in results])\n",
    "        \n",
    "    nearby_venues = pd.DataFrame([item for venue_list in venues_list for item in venue_list])\n",
    "    nearby_venues.columns = ['Neighbourhood', \n",
    "                  'Neighbourhood Latitude', \n",
    "                  'Neighbourhood Longitude', \n",
    "                  'Venue', \n",
    "                  'id',\n",
    "                  'Venue Latitude', \n",
    "                  'Venue Longitude', \n",
    "                  'Venue Category']\n",
    "    \n",
    "    return(nearby_venues)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# type your answer here\n",
    "\n",
    "melbourne_venues = getNearbyVenues(names=df_melbourne['Neighbourhood'],\n",
    "                                   latitudes=df_melbourne['Latitude'],\n",
    "                                   longitudes=df_melbourne['Longitude']\n",
    "                                  )\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1427, 8)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Neighbourhood Latitude</th>\n",
       "      <th>Neighbourhood Longitude</th>\n",
       "      <th>Venue</th>\n",
       "      <th>id</th>\n",
       "      <th>Venue Latitude</th>\n",
       "      <th>Venue Longitude</th>\n",
       "      <th>Venue Category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Naughty Boy</td>\n",
       "      <td>544affcd498e693acaed575e</td>\n",
       "      <td>-37.784351</td>\n",
       "      <td>144.969688</td>\n",
       "      <td>Breakfast Spot</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Filou’s Artisan Patissier</td>\n",
       "      <td>4cae8a5beb65b1f7adf05ccd</td>\n",
       "      <td>-37.787357</td>\n",
       "      <td>144.969448</td>\n",
       "      <td>Bakery</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Neighbourhood Wine</td>\n",
       "      <td>51384a8fe4b0828b66c2a7d4</td>\n",
       "      <td>-37.785133</td>\n",
       "      <td>144.977638</td>\n",
       "      <td>Wine Bar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Gerald's Bar</td>\n",
       "      <td>4b0ddfd0f964a520d25123e3</td>\n",
       "      <td>-37.788356</td>\n",
       "      <td>144.972097</td>\n",
       "      <td>Wine Bar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Great Northern Hotel</td>\n",
       "      <td>4bd175b4b221c9b6f689d5d0</td>\n",
       "      <td>-37.782090</td>\n",
       "      <td>144.973501</td>\n",
       "      <td>Gastropub</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Neighbourhood  Neighbourhood Latitude  Neighbourhood Longitude  \\\n",
       "0       Carlton              -37.784337               144.969747   \n",
       "1       Carlton              -37.784337               144.969747   \n",
       "2       Carlton              -37.784337               144.969747   \n",
       "3       Carlton              -37.784337               144.969747   \n",
       "4       Carlton              -37.784337               144.969747   \n",
       "\n",
       "                       Venue                        id  Venue Latitude  \\\n",
       "0                Naughty Boy  544affcd498e693acaed575e      -37.784351   \n",
       "1  Filou’s Artisan Patissier  4cae8a5beb65b1f7adf05ccd      -37.787357   \n",
       "2         Neighbourhood Wine  51384a8fe4b0828b66c2a7d4      -37.785133   \n",
       "3               Gerald's Bar  4b0ddfd0f964a520d25123e3      -37.788356   \n",
       "4       Great Northern Hotel  4bd175b4b221c9b6f689d5d0      -37.782090   \n",
       "\n",
       "   Venue Longitude  Venue Category  \n",
       "0       144.969688  Breakfast Spot  \n",
       "1       144.969448          Bakery  \n",
       "2       144.977638        Wine Bar  \n",
       "3       144.972097        Wine Bar  \n",
       "4       144.973501       Gastropub  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(melbourne_venues.shape)\n",
    "melbourne_venues.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "melbourne_venues_new = getNearbyVenues(names=df_melbourne['Neighbourhood'],\n",
    "                                   latitudes=df_melbourne['Latitude'],\n",
    "                                   longitudes=df_melbourne['Longitude']\n",
    "                                  )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Along these lines, in view of the latitude and longitude, I recovered suggested places for every zone inside the neighborhood span (under 1km) with Foursquare API. There may be a few territories that are less focused than the others, in this way having less spots encompassing. We would look into additional on the venue category to have a look at the neighborhood factors and answer the undertaking questions. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1427, 8)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Neighbourhood Latitude</th>\n",
       "      <th>Neighbourhood Longitude</th>\n",
       "      <th>Venue</th>\n",
       "      <th>id</th>\n",
       "      <th>Venue Latitude</th>\n",
       "      <th>Venue Longitude</th>\n",
       "      <th>Venue Category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Naughty Boy</td>\n",
       "      <td>544affcd498e693acaed575e</td>\n",
       "      <td>-37.784351</td>\n",
       "      <td>144.969688</td>\n",
       "      <td>Breakfast Spot</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Filou’s Artisan Patissier</td>\n",
       "      <td>4cae8a5beb65b1f7adf05ccd</td>\n",
       "      <td>-37.787357</td>\n",
       "      <td>144.969448</td>\n",
       "      <td>Bakery</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Neighbourhood Wine</td>\n",
       "      <td>51384a8fe4b0828b66c2a7d4</td>\n",
       "      <td>-37.785133</td>\n",
       "      <td>144.977638</td>\n",
       "      <td>Wine Bar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Gerald's Bar</td>\n",
       "      <td>4b0ddfd0f964a520d25123e3</td>\n",
       "      <td>-37.788356</td>\n",
       "      <td>144.972097</td>\n",
       "      <td>Wine Bar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Great Northern Hotel</td>\n",
       "      <td>4bd175b4b221c9b6f689d5d0</td>\n",
       "      <td>-37.782090</td>\n",
       "      <td>144.973501</td>\n",
       "      <td>Gastropub</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Neighbourhood  Neighbourhood Latitude  Neighbourhood Longitude  \\\n",
       "0       Carlton              -37.784337               144.969747   \n",
       "1       Carlton              -37.784337               144.969747   \n",
       "2       Carlton              -37.784337               144.969747   \n",
       "3       Carlton              -37.784337               144.969747   \n",
       "4       Carlton              -37.784337               144.969747   \n",
       "\n",
       "                       Venue                        id  Venue Latitude  \\\n",
       "0                Naughty Boy  544affcd498e693acaed575e      -37.784351   \n",
       "1  Filou’s Artisan Patissier  4cae8a5beb65b1f7adf05ccd      -37.787357   \n",
       "2         Neighbourhood Wine  51384a8fe4b0828b66c2a7d4      -37.785133   \n",
       "3               Gerald's Bar  4b0ddfd0f964a520d25123e3      -37.788356   \n",
       "4       Great Northern Hotel  4bd175b4b221c9b6f689d5d0      -37.782090   \n",
       "\n",
       "   Venue Longitude  Venue Category  \n",
       "0       144.969688  Breakfast Spot  \n",
       "1       144.969448          Bakery  \n",
       "2       144.977638        Wine Bar  \n",
       "3       144.972097        Wine Bar  \n",
       "4       144.973501       Gastropub  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(melbourne_venues_new.shape)\n",
    "melbourne_venues_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "rating_list=[]\n",
    "result_list=[]\n",
    "c=0\n",
    "for i in melbourne_venues_new['id']:\n",
    "    if c<10:\n",
    "        #print(i)\n",
    "        url1='https://api.foursquare.com/v2/venues/{}?client_id={}&client_secret={}&v={}'.format(i, CLIENT_ID, CLIENT_SECRET, VERSION)\n",
    "        results1 = requests.get(url1).json()#['response']['venue']['rating']\n",
    "        \n",
    "        result_list.append(results1)\n",
    "        try:\n",
    "            rating_list.append(results1['response']['venue']['rating'])\n",
    "        except:\n",
    "            rating_list.append(\"not rated\")\n",
    "        #print(\"\\n\")\n",
    "    else:\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "lol = pd.DataFrame(rating_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "lol.columns=['ratings']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "lol.to_csv('ratings.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>ratings</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>8.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>8.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>9.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>7.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>8.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>8.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>8.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>8.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>8.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0 ratings\n",
       "0           0     8.1\n",
       "1           1     8.4\n",
       "2           2     9.1\n",
       "3           3     8.0\n",
       "4           4     7.7\n",
       "5           5     8.6\n",
       "6           6     8.2\n",
       "7           7     8.2\n",
       "8           8     8.4\n",
       "9           9     8.3"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_ra = pd.read_csv('ratings.csv')\n",
    "\n",
    "df_ra.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "melbourne_venues['rating']=df_ra['ratings']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1427, 9)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Neighbourhood Latitude</th>\n",
       "      <th>Neighbourhood Longitude</th>\n",
       "      <th>Venue</th>\n",
       "      <th>id</th>\n",
       "      <th>Venue Latitude</th>\n",
       "      <th>Venue Longitude</th>\n",
       "      <th>Venue Category</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Naughty Boy</td>\n",
       "      <td>544affcd498e693acaed575e</td>\n",
       "      <td>-37.784351</td>\n",
       "      <td>144.969688</td>\n",
       "      <td>Breakfast Spot</td>\n",
       "      <td>8.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Filou’s Artisan Patissier</td>\n",
       "      <td>4cae8a5beb65b1f7adf05ccd</td>\n",
       "      <td>-37.787357</td>\n",
       "      <td>144.969448</td>\n",
       "      <td>Bakery</td>\n",
       "      <td>8.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Neighbourhood Wine</td>\n",
       "      <td>51384a8fe4b0828b66c2a7d4</td>\n",
       "      <td>-37.785133</td>\n",
       "      <td>144.977638</td>\n",
       "      <td>Wine Bar</td>\n",
       "      <td>9.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Gerald's Bar</td>\n",
       "      <td>4b0ddfd0f964a520d25123e3</td>\n",
       "      <td>-37.788356</td>\n",
       "      <td>144.972097</td>\n",
       "      <td>Wine Bar</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Great Northern Hotel</td>\n",
       "      <td>4bd175b4b221c9b6f689d5d0</td>\n",
       "      <td>-37.782090</td>\n",
       "      <td>144.973501</td>\n",
       "      <td>Gastropub</td>\n",
       "      <td>7.7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Neighbourhood  Neighbourhood Latitude  Neighbourhood Longitude  \\\n",
       "0       Carlton              -37.784337               144.969747   \n",
       "1       Carlton              -37.784337               144.969747   \n",
       "2       Carlton              -37.784337               144.969747   \n",
       "3       Carlton              -37.784337               144.969747   \n",
       "4       Carlton              -37.784337               144.969747   \n",
       "\n",
       "                       Venue                        id  Venue Latitude  \\\n",
       "0                Naughty Boy  544affcd498e693acaed575e      -37.784351   \n",
       "1  Filou’s Artisan Patissier  4cae8a5beb65b1f7adf05ccd      -37.787357   \n",
       "2         Neighbourhood Wine  51384a8fe4b0828b66c2a7d4      -37.785133   \n",
       "3               Gerald's Bar  4b0ddfd0f964a520d25123e3      -37.788356   \n",
       "4       Great Northern Hotel  4bd175b4b221c9b6f689d5d0      -37.782090   \n",
       "\n",
       "   Venue Longitude  Venue Category rating  \n",
       "0       144.969688  Breakfast Spot    8.1  \n",
       "1       144.969448          Bakery    8.4  \n",
       "2       144.977638        Wine Bar    9.1  \n",
       "3       144.972097        Wine Bar    8.0  \n",
       "4       144.973501       Gastropub    7.7  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(melbourne_venues.shape)\n",
    "melbourne_venues.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accessories Store</th>\n",
       "      <th>Aquarium</th>\n",
       "      <th>Arcade</th>\n",
       "      <th>Argentinian Restaurant</th>\n",
       "      <th>Art Gallery</th>\n",
       "      <th>Asian Restaurant</th>\n",
       "      <th>Athletics &amp; Sports</th>\n",
       "      <th>Australian Restaurant</th>\n",
       "      <th>BBQ Joint</th>\n",
       "      <th>Bagel Shop</th>\n",
       "      <th>...</th>\n",
       "      <th>Whisky Bar</th>\n",
       "      <th>Wine Bar</th>\n",
       "      <th>Wine Shop</th>\n",
       "      <th>Wings Joint</th>\n",
       "      <th>Women's Store</th>\n",
       "      <th>Yoga Studio</th>\n",
       "      <th>Yunnan Restaurant</th>\n",
       "      <th>Zoo</th>\n",
       "      <th>Zoo Exhibit</th>\n",
       "      <th>Neighbourhood</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Carlton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Carlton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Carlton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Carlton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Carlton</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 209 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Accessories Store  Aquarium  Arcade  Argentinian Restaurant  Art Gallery  \\\n",
       "0                  0         0       0                       0            0   \n",
       "1                  0         0       0                       0            0   \n",
       "2                  0         0       0                       0            0   \n",
       "3                  0         0       0                       0            0   \n",
       "4                  0         0       0                       0            0   \n",
       "\n",
       "   Asian Restaurant  Athletics & Sports  Australian Restaurant  BBQ Joint  \\\n",
       "0                 0                   0                      0          0   \n",
       "1                 0                   0                      0          0   \n",
       "2                 0                   0                      0          0   \n",
       "3                 0                   0                      0          0   \n",
       "4                 0                   0                      0          0   \n",
       "\n",
       "   Bagel Shop  ...  Whisky Bar  Wine Bar  Wine Shop  Wings Joint  \\\n",
       "0           0  ...           0         0          0            0   \n",
       "1           0  ...           0         0          0            0   \n",
       "2           0  ...           0         1          0            0   \n",
       "3           0  ...           0         1          0            0   \n",
       "4           0  ...           0         0          0            0   \n",
       "\n",
       "   Women's Store  Yoga Studio  Yunnan Restaurant  Zoo  Zoo Exhibit  \\\n",
       "0              0            0                  0    0            0   \n",
       "1              0            0                  0    0            0   \n",
       "2              0            0                  0    0            0   \n",
       "3              0            0                  0    0            0   \n",
       "4              0            0                  0    0            0   \n",
       "\n",
       "   Neighbourhood  \n",
       "0        Carlton  \n",
       "1        Carlton  \n",
       "2        Carlton  \n",
       "3        Carlton  \n",
       "4        Carlton  \n",
       "\n",
       "[5 rows x 209 columns]"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# one hot encoding\n",
    "melbourne_onehot = pd.get_dummies(melbourne_venues[['Venue Category']], prefix=\"\", prefix_sep=\"\")\n",
    "\n",
    "# add neighborhood column back to dataframe\n",
    "melbourne_onehot['Neighbourhood'] = melbourne_venues['Neighbourhood'] \n",
    "\n",
    "# move neighborhood column to the first column\n",
    "fixed_columns = [melbourne_onehot.columns[-1]] + list(melbourne_onehot.columns[:-1])\n",
    "melbourne_onehot.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1427, 209)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "melbourne_onehot.shape"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Clustering the Neighborhood"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In below dataset, there are 208 one of a kind categories such as 'Accessories Store', 'Bakery, ‘Coffee Shops’, 'Gastropub', and ‘Wine Bar’.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To make sense of what the area resembles, I recorded up the most well-known setting classifications in each ward at that point utilized the relative recurrence esteems for the sectioning part. The amassed table is a scanty 12×209 network. This time I would simply fit the k-means algorithm to discover comparative neighborhood bunches as it's normal and ground-breaking for unsupervised machine-learning projects. I pick 4 as the ideal number of k. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Accessories Store</th>\n",
       "      <th>Aquarium</th>\n",
       "      <th>Arcade</th>\n",
       "      <th>Argentinian Restaurant</th>\n",
       "      <th>Art Gallery</th>\n",
       "      <th>Asian Restaurant</th>\n",
       "      <th>Athletics &amp; Sports</th>\n",
       "      <th>Australian Restaurant</th>\n",
       "      <th>BBQ Joint</th>\n",
       "      <th>...</th>\n",
       "      <th>Warehouse Store</th>\n",
       "      <th>Whisky Bar</th>\n",
       "      <th>Wine Bar</th>\n",
       "      <th>Wine Shop</th>\n",
       "      <th>Wings Joint</th>\n",
       "      <th>Women's Store</th>\n",
       "      <th>Yoga Studio</th>\n",
       "      <th>Yunnan Restaurant</th>\n",
       "      <th>Zoo</th>\n",
       "      <th>Zoo Exhibit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.006993</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.020979</td>\n",
       "      <td>0.006993</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.020979</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Carlton North</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.022989</td>\n",
       "      <td>0.005747</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.017241</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.005747</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Docklands</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>East Melbourne</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.020000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.020000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Flemington, Kensington</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.014925</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.007463</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Melbourne</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.005076</td>\n",
       "      <td>0.005076</td>\n",
       "      <td>0.020305</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.040609</td>\n",
       "      <td>0.010152</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.015228</td>\n",
       "      <td>0.020305</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>North Melbourne</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Parkville</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.006711</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.006711</td>\n",
       "      <td>0.006711</td>\n",
       "      <td>0.006711</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.013423</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.013423</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.006711</td>\n",
       "      <td>0.006711</td>\n",
       "      <td>0.04698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Port Melbourne</td>\n",
       "      <td>0.009434</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.018868</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.018868</td>\n",
       "      <td>0.009434</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.009434</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>South Yarra</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.019231</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.009615</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Southbank, South Wharf</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.030000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.020000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>West Melbourne</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.010101</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.010101</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.010101</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.010101</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.010101</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>12 rows × 209 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             Neighbourhood  Accessories Store  Aquarium    Arcade  \\\n",
       "0                  Carlton           0.000000  0.000000  0.000000   \n",
       "1            Carlton North           0.000000  0.000000  0.000000   \n",
       "2                Docklands           0.000000  0.000000  0.000000   \n",
       "3           East Melbourne           0.000000  0.000000  0.000000   \n",
       "4   Flemington, Kensington           0.000000  0.000000  0.000000   \n",
       "5                Melbourne           0.000000  0.000000  0.000000   \n",
       "6          North Melbourne           0.000000  0.000000  0.000000   \n",
       "7                Parkville           0.000000  0.006711  0.000000   \n",
       "8           Port Melbourne           0.009434  0.000000  0.000000   \n",
       "9              South Yarra           0.000000  0.000000  0.000000   \n",
       "10  Southbank, South Wharf           0.000000  0.010000  0.000000   \n",
       "11          West Melbourne           0.000000  0.000000  0.010101   \n",
       "\n",
       "    Argentinian Restaurant  Art Gallery  Asian Restaurant  Athletics & Sports  \\\n",
       "0                 0.000000     0.000000          0.006993            0.000000   \n",
       "1                 0.000000     0.000000          0.000000            0.000000   \n",
       "2                 0.000000     0.000000          0.010000            0.000000   \n",
       "3                 0.000000     0.000000          0.020000            0.010000   \n",
       "4                 0.000000     0.000000          0.014925            0.000000   \n",
       "5                 0.005076     0.005076          0.020305            0.000000   \n",
       "6                 0.000000     0.000000          0.000000            0.000000   \n",
       "7                 0.000000     0.006711          0.006711            0.006711   \n",
       "8                 0.000000     0.000000          0.018868            0.000000   \n",
       "9                 0.000000     0.000000          0.000000            0.000000   \n",
       "10                0.000000     0.030000          0.010000            0.000000   \n",
       "11                0.000000     0.000000          0.010101            0.000000   \n",
       "\n",
       "    Australian Restaurant  BBQ Joint  ...  Warehouse Store  Whisky Bar  \\\n",
       "0                0.020979   0.006993  ...         0.000000    0.000000   \n",
       "1                0.022989   0.005747  ...         0.000000    0.000000   \n",
       "2                0.000000   0.000000  ...         0.010000    0.000000   \n",
       "3                0.010000   0.000000  ...         0.000000    0.000000   \n",
       "4                0.000000   0.000000  ...         0.000000    0.000000   \n",
       "5                0.040609   0.010152  ...         0.000000    0.015228   \n",
       "6                0.000000   0.000000  ...         0.000000    0.000000   \n",
       "7                0.000000   0.013423  ...         0.000000    0.000000   \n",
       "8                0.018868   0.009434  ...         0.000000    0.000000   \n",
       "9                0.019231   0.000000  ...         0.000000    0.000000   \n",
       "10               0.020000   0.000000  ...         0.000000    0.010000   \n",
       "11               0.010101   0.000000  ...         0.010101    0.000000   \n",
       "\n",
       "    Wine Bar  Wine Shop  Wings Joint  Women's Store  Yoga Studio  \\\n",
       "0   0.020979   0.000000     0.000000       0.000000     0.000000   \n",
       "1   0.017241   0.000000     0.000000       0.000000     0.000000   \n",
       "2   0.000000   0.000000     0.000000       0.000000     0.000000   \n",
       "3   0.020000   0.000000     0.000000       0.000000     0.000000   \n",
       "4   0.000000   0.000000     0.007463       0.000000     0.000000   \n",
       "5   0.020305   0.000000     0.000000       0.000000     0.000000   \n",
       "6   0.000000   0.000000     0.000000       0.000000     0.000000   \n",
       "7   0.013423   0.000000     0.000000       0.000000     0.000000   \n",
       "8   0.000000   0.009434     0.000000       0.000000     0.000000   \n",
       "9   0.000000   0.000000     0.000000       0.000000     0.009615   \n",
       "10  0.000000   0.000000     0.000000       0.000000     0.000000   \n",
       "11  0.000000   0.000000     0.000000       0.010101     0.000000   \n",
       "\n",
       "    Yunnan Restaurant       Zoo  Zoo Exhibit  \n",
       "0            0.000000  0.000000      0.00000  \n",
       "1            0.000000  0.005747      0.00000  \n",
       "2            0.000000  0.000000      0.00000  \n",
       "3            0.000000  0.000000      0.00000  \n",
       "4            0.000000  0.000000      0.00000  \n",
       "5            0.000000  0.000000      0.00000  \n",
       "6            0.000000  0.000000      0.00000  \n",
       "7            0.006711  0.006711      0.04698  \n",
       "8            0.000000  0.000000      0.00000  \n",
       "9            0.000000  0.000000      0.00000  \n",
       "10           0.000000  0.000000      0.00000  \n",
       "11           0.000000  0.000000      0.00000  \n",
       "\n",
       "[12 rows x 209 columns]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "melbourne_grouped = melbourne_onehot.groupby('Neighbourhood').mean().reset_index()\n",
    "melbourne_grouped"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----Carlton----\n",
      "                venue  freq\n",
      "0                Café  0.15\n",
      "1                 Pub  0.06\n",
      "2  Light Rail Station  0.05\n",
      "3         Pizza Place  0.04\n",
      "4                Park  0.03\n",
      "\n",
      "\n",
      "----Carlton North----\n",
      "                venue  freq\n",
      "0                Café  0.13\n",
      "1  Light Rail Station  0.06\n",
      "2                 Pub  0.06\n",
      "3                 Bar  0.04\n",
      "4     Thai Restaurant  0.03\n",
      "\n",
      "\n",
      "----Docklands----\n",
      "                 venue  freq\n",
      "0                 Café  0.17\n",
      "1          Coffee Shop  0.10\n",
      "2                Hotel  0.04\n",
      "3  Japanese Restaurant  0.04\n",
      "4    Indian Restaurant  0.03\n",
      "\n",
      "\n",
      "----East Melbourne----\n",
      "             venue  freq\n",
      "0             Café  0.12\n",
      "1  Thai Restaurant  0.08\n",
      "2              Pub  0.07\n",
      "3   Tennis Stadium  0.05\n",
      "4      Coffee Shop  0.04\n",
      "\n",
      "\n",
      "----Flemington, Kensington----\n",
      "                venue  freq\n",
      "0                Café  0.18\n",
      "1         Pizza Place  0.07\n",
      "2  Light Rail Station  0.05\n",
      "3                 Pub  0.04\n",
      "4       Grocery Store  0.03\n",
      "\n",
      "\n",
      "----Melbourne----\n",
      "                   venue  freq\n",
      "0                   Café  0.15\n",
      "1            Coffee Shop  0.05\n",
      "2           Cocktail Bar  0.04\n",
      "3  Australian Restaurant  0.04\n",
      "4                   Park  0.04\n",
      "\n",
      "\n",
      "----North Melbourne----\n",
      "            venue  freq\n",
      "0            Park  0.19\n",
      "1            Café  0.14\n",
      "2             Gym  0.10\n",
      "3      Playground  0.10\n",
      "4  Ice Cream Shop  0.10\n",
      "\n",
      "\n",
      "----Parkville----\n",
      "                venue  freq\n",
      "0                Café  0.15\n",
      "1         Coffee Shop  0.06\n",
      "2  Italian Restaurant  0.05\n",
      "3         Zoo Exhibit  0.05\n",
      "4  Light Rail Station  0.04\n",
      "\n",
      "\n",
      "----Port Melbourne----\n",
      "         venue  freq\n",
      "0         Café  0.14\n",
      "1        Hotel  0.05\n",
      "2          Bar  0.05\n",
      "3  Coffee Shop  0.04\n",
      "4          Pub  0.03\n",
      "\n",
      "\n",
      "----South Yarra----\n",
      "                 venue  freq\n",
      "0                 Café  0.20\n",
      "1   Italian Restaurant  0.07\n",
      "2  Japanese Restaurant  0.05\n",
      "3                Hotel  0.05\n",
      "4               Bakery  0.04\n",
      "\n",
      "\n",
      "----Southbank, South Wharf----\n",
      "         venue  freq\n",
      "0          Bar  0.06\n",
      "1        Hotel  0.05\n",
      "2  Coffee Shop  0.04\n",
      "3      Theater  0.04\n",
      "4         Café  0.04\n",
      "\n",
      "\n",
      "----West Melbourne----\n",
      "                venue  freq\n",
      "0                Café  0.19\n",
      "1  Italian Restaurant  0.05\n",
      "2                 Pub  0.04\n",
      "3      Sandwich Place  0.03\n",
      "4   Indian Restaurant  0.03\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "num_top_venues = 5\n",
    "\n",
    "for hood in melbourne_grouped['Neighbourhood']:\n",
    "    print(\"----\"+hood+\"----\")\n",
    "    temp = melbourne_grouped[melbourne_grouped['Neighbourhood'] == hood].T.reset_index()\n",
    "    temp.columns = ['venue','freq']\n",
    "    temp = temp.iloc[1:]\n",
    "    temp['freq'] = temp['freq'].astype(float)\n",
    "    temp = temp.round({'freq': 2})\n",
    "    print(temp.sort_values('freq', ascending=False).reset_index(drop=True).head(num_top_venues))\n",
    "    print('\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "def return_most_common_venues(row, num_top_venues):\n",
    "    row_categories = row.iloc[1:]\n",
    "    row_categories_sorted = row_categories.sort_values(ascending=False)\n",
    "    \n",
    "    return row_categories_sorted.index.values[0:num_top_venues]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>1st Most Common Venue</th>\n",
       "      <th>2nd Most Common Venue</th>\n",
       "      <th>3rd Most Common Venue</th>\n",
       "      <th>4th Most Common Venue</th>\n",
       "      <th>5th Most Common Venue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>Café</td>\n",
       "      <td>Pub</td>\n",
       "      <td>Light Rail Station</td>\n",
       "      <td>Pizza Place</td>\n",
       "      <td>Bar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Carlton North</td>\n",
       "      <td>Café</td>\n",
       "      <td>Pub</td>\n",
       "      <td>Light Rail Station</td>\n",
       "      <td>Bar</td>\n",
       "      <td>Thai Restaurant</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Docklands</td>\n",
       "      <td>Café</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>Japanese Restaurant</td>\n",
       "      <td>Hotel</td>\n",
       "      <td>Korean Restaurant</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>East Melbourne</td>\n",
       "      <td>Café</td>\n",
       "      <td>Thai Restaurant</td>\n",
       "      <td>Pub</td>\n",
       "      <td>Tennis Stadium</td>\n",
       "      <td>Bar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Flemington, Kensington</td>\n",
       "      <td>Café</td>\n",
       "      <td>Pizza Place</td>\n",
       "      <td>Light Rail Station</td>\n",
       "      <td>Pub</td>\n",
       "      <td>Malay Restaurant</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Neighbourhood 1st Most Common Venue 2nd Most Common Venue  \\\n",
       "0                 Carlton                  Café                   Pub   \n",
       "1           Carlton North                  Café                   Pub   \n",
       "2               Docklands                  Café           Coffee Shop   \n",
       "3          East Melbourne                  Café       Thai Restaurant   \n",
       "4  Flemington, Kensington                  Café           Pizza Place   \n",
       "\n",
       "  3rd Most Common Venue 4th Most Common Venue 5th Most Common Venue  \n",
       "0    Light Rail Station           Pizza Place                   Bar  \n",
       "1    Light Rail Station                   Bar       Thai Restaurant  \n",
       "2   Japanese Restaurant                 Hotel     Korean Restaurant  \n",
       "3                   Pub        Tennis Stadium                   Bar  \n",
       "4    Light Rail Station                   Pub      Malay Restaurant  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "num_top_venues = 5\n",
    "\n",
    "indicators = ['st', 'nd', 'rd']\n",
    "\n",
    "# create columns according to number of top venues\n",
    "columns = ['Neighbourhood']\n",
    "for ind in np.arange(num_top_venues):\n",
    "    try:\n",
    "        columns.append('{}{} Most Common Venue'.format(ind+1, indicators[ind]))\n",
    "    except:\n",
    "        columns.append('{}th Most Common Venue'.format(ind+1))\n",
    "\n",
    "# create a new dataframe\n",
    "neighbourhoods_venues_sorted = pd.DataFrame(columns=columns)\n",
    "neighbourhoods_venues_sorted['Neighbourhood'] = melbourne_grouped['Neighbourhood']\n",
    "\n",
    "for ind in np.arange(melbourne_grouped.shape[0]):\n",
    "    neighbourhoods_venues_sorted.iloc[ind, 1:] = return_most_common_venues(melbourne_grouped.iloc[ind, :], num_top_venues)\n",
    "\n",
    "neighbourhoods_venues_sorted.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To make sense of what the area resembles, I recorded up the most well-known setting classifications in each ward at that point utilized the relative recurrence esteems for the sectioning part. The amassed table is a scanty 12×209 network. This time I would simply fit the k-means algorithm to discover comparative neighborhood bunches as it's normal and ground-breaking for unsupervised machine-learning projects. I pick 4 as the ideal number of k. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 2, 1, 0, 2, 1, 3, 1, 1, 1, 1, 2], dtype=int32)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "\n",
    "# set number of clusters\n",
    "kclusters = 4\n",
    "\n",
    "melbourne_grouped_clustering = melbourne_grouped.drop('Neighbourhood', 1)\n",
    "\n",
    "# run k-means clustering\n",
    "kmeans = KMeans(n_clusters=kclusters, random_state=0).fit(melbourne_grouped_clustering)\n",
    "\n",
    "# check cluster labels generated for each row in the dataframe\n",
    "kmeans.labels_ \n",
    "# to change use .astype()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Postalcode</th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3053</td>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3054</td>\n",
       "      <td>Carlton North</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3008</td>\n",
       "      <td>Docklands</td>\n",
       "      <td>-37.814719</td>\n",
       "      <td>144.948039</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3002</td>\n",
       "      <td>East Melbourne</td>\n",
       "      <td>-37.816640</td>\n",
       "      <td>144.987811</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3031</td>\n",
       "      <td>Flemington, Kensington</td>\n",
       "      <td>-37.788375</td>\n",
       "      <td>144.931472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3000</td>\n",
       "      <td>Melbourne</td>\n",
       "      <td>-37.814563</td>\n",
       "      <td>144.970267</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3051</td>\n",
       "      <td>North Melbourne</td>\n",
       "      <td>-37.905996</td>\n",
       "      <td>145.056254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3052</td>\n",
       "      <td>Parkville</td>\n",
       "      <td>-37.796152</td>\n",
       "      <td>144.961351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3207</td>\n",
       "      <td>Port Melbourne</td>\n",
       "      <td>-37.829244</td>\n",
       "      <td>144.956207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3006</td>\n",
       "      <td>Southbank, South Wharf</td>\n",
       "      <td>-37.823258</td>\n",
       "      <td>144.965926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3141</td>\n",
       "      <td>South Yarra</td>\n",
       "      <td>-36.990185</td>\n",
       "      <td>144.063338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>3003</td>\n",
       "      <td>West Melbourne</td>\n",
       "      <td>-37.806255</td>\n",
       "      <td>144.941123</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Postalcode           Neighbourhood   Latitude   Longitude\n",
       "0         3053                 Carlton -37.784337  144.969747\n",
       "1         3054           Carlton North -37.784337  144.969747\n",
       "2         3008               Docklands -37.814719  144.948039\n",
       "3         3002          East Melbourne -37.816640  144.987811\n",
       "4         3031  Flemington, Kensington -37.788375  144.931472\n",
       "5         3000               Melbourne -37.814563  144.970267\n",
       "6         3051         North Melbourne -37.905996  145.056254\n",
       "7         3052               Parkville -37.796152  144.961351\n",
       "8         3207          Port Melbourne -37.829244  144.956207\n",
       "9         3006  Southbank, South Wharf -37.823258  144.965926\n",
       "10        3141             South Yarra -36.990185  144.063338\n",
       "11        3003          West Melbourne -37.806255  144.941123"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_melb_new = df_melbourne.sort_values('Postalcode', ascending=False)\n",
    "df_melb_new = df_melbourne.drop_duplicates(subset='Neighbourhood', keep='first')\n",
    "df_melb_new_index = df_melb_new.reset_index(drop=True)\n",
    "df_melb_new_index.head(13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(12, 11)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Postalcode</th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Cluster</th>\n",
       "      <th>Cluster_Labels</th>\n",
       "      <th>1st Most Common Venue</th>\n",
       "      <th>2nd Most Common Venue</th>\n",
       "      <th>3rd Most Common Venue</th>\n",
       "      <th>4th Most Common Venue</th>\n",
       "      <th>5th Most Common Venue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3053</td>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>Café</td>\n",
       "      <td>Pub</td>\n",
       "      <td>Light Rail Station</td>\n",
       "      <td>Pizza Place</td>\n",
       "      <td>Bar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3054</td>\n",
       "      <td>Carlton North</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>Café</td>\n",
       "      <td>Pub</td>\n",
       "      <td>Light Rail Station</td>\n",
       "      <td>Bar</td>\n",
       "      <td>Thai Restaurant</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3008</td>\n",
       "      <td>Docklands</td>\n",
       "      <td>-37.814719</td>\n",
       "      <td>144.948039</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Café</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>Japanese Restaurant</td>\n",
       "      <td>Hotel</td>\n",
       "      <td>Korean Restaurant</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3002</td>\n",
       "      <td>East Melbourne</td>\n",
       "      <td>-37.816640</td>\n",
       "      <td>144.987811</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Café</td>\n",
       "      <td>Thai Restaurant</td>\n",
       "      <td>Pub</td>\n",
       "      <td>Tennis Stadium</td>\n",
       "      <td>Bar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3031</td>\n",
       "      <td>Flemington, Kensington</td>\n",
       "      <td>-37.788375</td>\n",
       "      <td>144.931472</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>Café</td>\n",
       "      <td>Pizza Place</td>\n",
       "      <td>Light Rail Station</td>\n",
       "      <td>Pub</td>\n",
       "      <td>Malay Restaurant</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3000</td>\n",
       "      <td>Melbourne</td>\n",
       "      <td>-37.814563</td>\n",
       "      <td>144.970267</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Café</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>Australian Restaurant</td>\n",
       "      <td>Cocktail Bar</td>\n",
       "      <td>Hotel</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3051</td>\n",
       "      <td>North Melbourne</td>\n",
       "      <td>-37.905996</td>\n",
       "      <td>145.056254</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>Park</td>\n",
       "      <td>Café</td>\n",
       "      <td>Ice Cream Shop</td>\n",
       "      <td>Gym</td>\n",
       "      <td>Playground</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3052</td>\n",
       "      <td>Parkville</td>\n",
       "      <td>-37.796152</td>\n",
       "      <td>144.961351</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Café</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>Italian Restaurant</td>\n",
       "      <td>Zoo Exhibit</td>\n",
       "      <td>Light Rail Station</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3207</td>\n",
       "      <td>Port Melbourne</td>\n",
       "      <td>-37.829244</td>\n",
       "      <td>144.956207</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Café</td>\n",
       "      <td>Bar</td>\n",
       "      <td>Hotel</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>Pub</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3006</td>\n",
       "      <td>Southbank, South Wharf</td>\n",
       "      <td>-37.823258</td>\n",
       "      <td>144.965926</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Bar</td>\n",
       "      <td>Hotel</td>\n",
       "      <td>Park</td>\n",
       "      <td>Café</td>\n",
       "      <td>Cocktail Bar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3141</td>\n",
       "      <td>South Yarra</td>\n",
       "      <td>-36.990185</td>\n",
       "      <td>144.063338</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Café</td>\n",
       "      <td>Italian Restaurant</td>\n",
       "      <td>Japanese Restaurant</td>\n",
       "      <td>Hotel</td>\n",
       "      <td>Bakery</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>3003</td>\n",
       "      <td>West Melbourne</td>\n",
       "      <td>-37.806255</td>\n",
       "      <td>144.941123</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>Café</td>\n",
       "      <td>Italian Restaurant</td>\n",
       "      <td>Pub</td>\n",
       "      <td>Indian Restaurant</td>\n",
       "      <td>Sandwich Place</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Postalcode           Neighbourhood   Latitude   Longitude  Cluster  \\\n",
       "0         3053                 Carlton -37.784337  144.969747        2   \n",
       "1         3054           Carlton North -37.784337  144.969747        2   \n",
       "2         3008               Docklands -37.814719  144.948039        1   \n",
       "3         3002          East Melbourne -37.816640  144.987811        0   \n",
       "4         3031  Flemington, Kensington -37.788375  144.931472        2   \n",
       "5         3000               Melbourne -37.814563  144.970267        1   \n",
       "6         3051         North Melbourne -37.905996  145.056254        3   \n",
       "7         3052               Parkville -37.796152  144.961351        1   \n",
       "8         3207          Port Melbourne -37.829244  144.956207        1   \n",
       "9         3006  Southbank, South Wharf -37.823258  144.965926        1   \n",
       "10        3141             South Yarra -36.990185  144.063338        1   \n",
       "11        3003          West Melbourne -37.806255  144.941123        2   \n",
       "\n",
       "    Cluster_Labels 1st Most Common Venue 2nd Most Common Venue  \\\n",
       "0                2                  Café                   Pub   \n",
       "1                2                  Café                   Pub   \n",
       "2                1                  Café           Coffee Shop   \n",
       "3                0                  Café       Thai Restaurant   \n",
       "4                2                  Café           Pizza Place   \n",
       "5                1                  Café           Coffee Shop   \n",
       "6                3                  Park                  Café   \n",
       "7                1                  Café           Coffee Shop   \n",
       "8                1                  Café                   Bar   \n",
       "9                1                   Bar                 Hotel   \n",
       "10               1                  Café    Italian Restaurant   \n",
       "11               2                  Café    Italian Restaurant   \n",
       "\n",
       "    3rd Most Common Venue 4th Most Common Venue 5th Most Common Venue  \n",
       "0      Light Rail Station           Pizza Place                   Bar  \n",
       "1      Light Rail Station                   Bar       Thai Restaurant  \n",
       "2     Japanese Restaurant                 Hotel     Korean Restaurant  \n",
       "3                     Pub        Tennis Stadium                   Bar  \n",
       "4      Light Rail Station                   Pub      Malay Restaurant  \n",
       "5   Australian Restaurant          Cocktail Bar                 Hotel  \n",
       "6          Ice Cream Shop                   Gym            Playground  \n",
       "7      Italian Restaurant           Zoo Exhibit    Light Rail Station  \n",
       "8                   Hotel           Coffee Shop                   Pub  \n",
       "9                    Park                  Café          Cocktail Bar  \n",
       "10    Japanese Restaurant                 Hotel                Bakery  \n",
       "11                    Pub     Indian Restaurant        Sandwich Place  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neighbourhoods_venues_sorted.insert(0, 'Cluster_Labels', kmeans.labels_)\n",
    "\n",
    "melbourne_merge = df_melb_new_index\n",
    "\n",
    "# merge toronto_grouped with toronto_data to add latitude/longitude for each neighborhood\n",
    "melbourne_merge = melbourne_merge.join(neighbourhoods_venues_sorted.set_index('Neighbourhood'), on='Neighbourhood')\n",
    "\n",
    "melbourne_merge\n",
    "print(melbourne_merge.shape)\n",
    "melbourne_merge.head(13) # check the last columns!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "melbourne_merge['Cluster_Labels'] = melbourne_merge.Cluster_Labels.astype(int)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Mapping the Cluster\n",
    "\n",
    "For people who are inexperienced with neighborhood in Melbourne, it ought to be hard to see the land design just from taking a gander at the table above, so the accompanying refined representation may help. \n",
    "\n",
    "Red Circle: Cluster 0\n",
    "\n",
    "Purple Circle: Cluster 1\n",
    "\n",
    "Blue Circle: Cluster 2\n",
    "\n",
    "Yellow Circle: Cluster 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe src=\"about:blank\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" data-html= onload=\"this.contentDocument.open();this.contentDocument.write(atob(this.getAttribute('data-html')));this.contentDocument.close();\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x1a14963bd0>"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import matplotlib.cm as cm # Matplotlib and associated plotting modules\n",
    "\n",
    "import matplotlib.colors as colors\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "map_clusters = folium.Map(location=[melbourne_latitude, melbourne_longitude], zoom_start=11)\n",
    "\n",
    "# set color scheme for the clusters\n",
    "x = np.arange(kclusters)\n",
    "ys = [i + x + (i*x)**2 for i in range(kclusters)]\n",
    "colors_array = cm.rainbow(np.linspace(0, 1, len(ys)))\n",
    "rainbow = [colors.rgb2hex(i) for i in colors_array]\n",
    "\n",
    "# add markers to the map\n",
    "markers_colors = []\n",
    "for lat, lon, poi, cluster in zip(melbourne_merge['Latitude'], melbourne_merge['Longitude'], melbourne_merge['Neighbourhood'], melbourne_merge['Cluster_Labels']):\n",
    "    label = folium.Popup(str(poi) + ' Cluster ' + str(cluster), parse_html=True)\n",
    "    folium.CircleMarker(\n",
    "        [lat, lon],\n",
    "        radius=5,\n",
    "        popup=label,\n",
    "        color=rainbow[cluster-1],\n",
    "        fill=True,\n",
    "        fill_color=rainbow[cluster-1],\n",
    "        fill_opacity=0.7).add_to(map_clusters)\n",
    "       \n",
    "map_clusters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The first cluster:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Cluster_Labels</th>\n",
       "      <th>1st Most Common Venue</th>\n",
       "      <th>2nd Most Common Venue</th>\n",
       "      <th>3rd Most Common Venue</th>\n",
       "      <th>4th Most Common Venue</th>\n",
       "      <th>5th Most Common Venue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>East Melbourne</td>\n",
       "      <td>0</td>\n",
       "      <td>Café</td>\n",
       "      <td>Thai Restaurant</td>\n",
       "      <td>Pub</td>\n",
       "      <td>Tennis Stadium</td>\n",
       "      <td>Bar</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Neighbourhood  Cluster_Labels 1st Most Common Venue 2nd Most Common Venue  \\\n",
       "3  East Melbourne               0                  Café       Thai Restaurant   \n",
       "\n",
       "  3rd Most Common Venue 4th Most Common Venue 5th Most Common Venue  \n",
       "3                   Pub        Tennis Stadium                   Bar  "
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "melbourne_merge.loc[melbourne_merge['Cluster_Labels'] == 0, melbourne_merge.columns[[1] + list(range(5, melbourne_merge.shape[1]))]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The second cluster:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Cluster_Labels</th>\n",
       "      <th>1st Most Common Venue</th>\n",
       "      <th>2nd Most Common Venue</th>\n",
       "      <th>3rd Most Common Venue</th>\n",
       "      <th>4th Most Common Venue</th>\n",
       "      <th>5th Most Common Venue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Docklands</td>\n",
       "      <td>1</td>\n",
       "      <td>Café</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>Japanese Restaurant</td>\n",
       "      <td>Hotel</td>\n",
       "      <td>Korean Restaurant</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Melbourne</td>\n",
       "      <td>1</td>\n",
       "      <td>Café</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>Australian Restaurant</td>\n",
       "      <td>Cocktail Bar</td>\n",
       "      <td>Hotel</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Parkville</td>\n",
       "      <td>1</td>\n",
       "      <td>Café</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>Italian Restaurant</td>\n",
       "      <td>Zoo Exhibit</td>\n",
       "      <td>Light Rail Station</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Port Melbourne</td>\n",
       "      <td>1</td>\n",
       "      <td>Café</td>\n",
       "      <td>Bar</td>\n",
       "      <td>Hotel</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>Pub</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Southbank, South Wharf</td>\n",
       "      <td>1</td>\n",
       "      <td>Bar</td>\n",
       "      <td>Hotel</td>\n",
       "      <td>Park</td>\n",
       "      <td>Café</td>\n",
       "      <td>Cocktail Bar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>South Yarra</td>\n",
       "      <td>1</td>\n",
       "      <td>Café</td>\n",
       "      <td>Italian Restaurant</td>\n",
       "      <td>Japanese Restaurant</td>\n",
       "      <td>Hotel</td>\n",
       "      <td>Bakery</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Neighbourhood  Cluster_Labels 1st Most Common Venue  \\\n",
       "2                Docklands               1                  Café   \n",
       "5                Melbourne               1                  Café   \n",
       "7                Parkville               1                  Café   \n",
       "8           Port Melbourne               1                  Café   \n",
       "9   Southbank, South Wharf               1                   Bar   \n",
       "10             South Yarra               1                  Café   \n",
       "\n",
       "   2nd Most Common Venue  3rd Most Common Venue 4th Most Common Venue  \\\n",
       "2            Coffee Shop    Japanese Restaurant                 Hotel   \n",
       "5            Coffee Shop  Australian Restaurant          Cocktail Bar   \n",
       "7            Coffee Shop     Italian Restaurant           Zoo Exhibit   \n",
       "8                    Bar                  Hotel           Coffee Shop   \n",
       "9                  Hotel                   Park                  Café   \n",
       "10    Italian Restaurant    Japanese Restaurant                 Hotel   \n",
       "\n",
       "   5th Most Common Venue  \n",
       "2      Korean Restaurant  \n",
       "5                  Hotel  \n",
       "7     Light Rail Station  \n",
       "8                    Pub  \n",
       "9           Cocktail Bar  \n",
       "10                Bakery  "
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "melbourne_merge.loc[melbourne_merge['Cluster_Labels'] == 1, melbourne_merge.columns[[1] + list(range(5, melbourne_merge.shape[1]))]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The third cluster:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Cluster_Labels</th>\n",
       "      <th>1st Most Common Venue</th>\n",
       "      <th>2nd Most Common Venue</th>\n",
       "      <th>3rd Most Common Venue</th>\n",
       "      <th>4th Most Common Venue</th>\n",
       "      <th>5th Most Common Venue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>2</td>\n",
       "      <td>Café</td>\n",
       "      <td>Pub</td>\n",
       "      <td>Light Rail Station</td>\n",
       "      <td>Pizza Place</td>\n",
       "      <td>Bar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Carlton North</td>\n",
       "      <td>2</td>\n",
       "      <td>Café</td>\n",
       "      <td>Pub</td>\n",
       "      <td>Light Rail Station</td>\n",
       "      <td>Bar</td>\n",
       "      <td>Thai Restaurant</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Flemington, Kensington</td>\n",
       "      <td>2</td>\n",
       "      <td>Café</td>\n",
       "      <td>Pizza Place</td>\n",
       "      <td>Light Rail Station</td>\n",
       "      <td>Pub</td>\n",
       "      <td>Malay Restaurant</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>West Melbourne</td>\n",
       "      <td>2</td>\n",
       "      <td>Café</td>\n",
       "      <td>Italian Restaurant</td>\n",
       "      <td>Pub</td>\n",
       "      <td>Indian Restaurant</td>\n",
       "      <td>Sandwich Place</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Neighbourhood  Cluster_Labels 1st Most Common Venue  \\\n",
       "0                  Carlton               2                  Café   \n",
       "1            Carlton North               2                  Café   \n",
       "4   Flemington, Kensington               2                  Café   \n",
       "11          West Melbourne               2                  Café   \n",
       "\n",
       "   2nd Most Common Venue 3rd Most Common Venue 4th Most Common Venue  \\\n",
       "0                    Pub    Light Rail Station           Pizza Place   \n",
       "1                    Pub    Light Rail Station                   Bar   \n",
       "4            Pizza Place    Light Rail Station                   Pub   \n",
       "11    Italian Restaurant                   Pub     Indian Restaurant   \n",
       "\n",
       "   5th Most Common Venue  \n",
       "0                    Bar  \n",
       "1        Thai Restaurant  \n",
       "4       Malay Restaurant  \n",
       "11        Sandwich Place  "
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "melbourne_merge.loc[melbourne_merge['Cluster_Labels'] == 2, melbourne_merge.columns[[1] + list(range(5, melbourne_merge.shape[1]))]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The fourth cluster:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Cluster_Labels</th>\n",
       "      <th>1st Most Common Venue</th>\n",
       "      <th>2nd Most Common Venue</th>\n",
       "      <th>3rd Most Common Venue</th>\n",
       "      <th>4th Most Common Venue</th>\n",
       "      <th>5th Most Common Venue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>North Melbourne</td>\n",
       "      <td>3</td>\n",
       "      <td>Park</td>\n",
       "      <td>Café</td>\n",
       "      <td>Ice Cream Shop</td>\n",
       "      <td>Gym</td>\n",
       "      <td>Playground</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Neighbourhood  Cluster_Labels 1st Most Common Venue  \\\n",
       "6  North Melbourne               3                  Park   \n",
       "\n",
       "  2nd Most Common Venue 3rd Most Common Venue 4th Most Common Venue  \\\n",
       "6                  Café        Ice Cream Shop                   Gym   \n",
       "\n",
       "  5th Most Common Venue  \n",
       "6            Playground  "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "melbourne_merge.loc[melbourne_merge['Cluster_Labels'] == 3, melbourne_merge.columns[[1] + list(range(5, melbourne_merge.shape[1]))]]"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have watched intriguing discoveries just from a moderately little dataset from essential geospatial information and Foursquare. In the short check part, you could have a major image of which neighborhood suits your requirements. The clustering result sadditionally ended up being shockingly acceptable. Without putting geocoordinate information into k-implies fitting, the result apparently found the best approach to frame portions that bunch neighborhood with its spatially close partner. Seeing further, each cluster could be portrayed as beneath:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cluster 0: Suburb neighborhood that populated most by locals. \n",
    "\n",
    "Cluster 1: Many urban venues, understudies, outdoor activity venues, located majorly in downtown area\n",
    "\n",
    "Cluster 2: Contain places to take a sip of coffee while enjoying Italian food surrounded by classic type of trattoria (café)\n",
    "\n",
    "Cluster 3: A vintage-style venues area, suit best for artsy type travelers or vacationers.\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Additional Information: Recommendation System"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Neighbourhood Latitude</th>\n",
       "      <th>Neighbourhood Longitude</th>\n",
       "      <th>Venue</th>\n",
       "      <th>id</th>\n",
       "      <th>Venue Latitude</th>\n",
       "      <th>Venue Longitude</th>\n",
       "      <th>Venue Category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Naughty Boy</td>\n",
       "      <td>544affcd498e693acaed575e</td>\n",
       "      <td>-37.784351</td>\n",
       "      <td>144.969688</td>\n",
       "      <td>Breakfast Spot</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Filou’s Artisan Patissier</td>\n",
       "      <td>4cae8a5beb65b1f7adf05ccd</td>\n",
       "      <td>-37.787357</td>\n",
       "      <td>144.969448</td>\n",
       "      <td>Bakery</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Neighbourhood Wine</td>\n",
       "      <td>51384a8fe4b0828b66c2a7d4</td>\n",
       "      <td>-37.785133</td>\n",
       "      <td>144.977638</td>\n",
       "      <td>Wine Bar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Gerald's Bar</td>\n",
       "      <td>4b0ddfd0f964a520d25123e3</td>\n",
       "      <td>-37.788356</td>\n",
       "      <td>144.972097</td>\n",
       "      <td>Wine Bar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Great Northern Hotel</td>\n",
       "      <td>4bd175b4b221c9b6f689d5d0</td>\n",
       "      <td>-37.782090</td>\n",
       "      <td>144.973501</td>\n",
       "      <td>Gastropub</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Neighbourhood  Neighbourhood Latitude  Neighbourhood Longitude  \\\n",
       "0       Carlton              -37.784337               144.969747   \n",
       "1       Carlton              -37.784337               144.969747   \n",
       "2       Carlton              -37.784337               144.969747   \n",
       "3       Carlton              -37.784337               144.969747   \n",
       "4       Carlton              -37.784337               144.969747   \n",
       "\n",
       "                       Venue                        id  Venue Latitude  \\\n",
       "0                Naughty Boy  544affcd498e693acaed575e      -37.784351   \n",
       "1  Filou’s Artisan Patissier  4cae8a5beb65b1f7adf05ccd      -37.787357   \n",
       "2         Neighbourhood Wine  51384a8fe4b0828b66c2a7d4      -37.785133   \n",
       "3               Gerald's Bar  4b0ddfd0f964a520d25123e3      -37.788356   \n",
       "4       Great Northern Hotel  4bd175b4b221c9b6f689d5d0      -37.782090   \n",
       "\n",
       "   Venue Longitude  Venue Category  \n",
       "0       144.969688  Breakfast Spot  \n",
       "1       144.969448          Bakery  \n",
       "2       144.977638        Wine Bar  \n",
       "3       144.972097        Wine Bar  \n",
       "4       144.973501       Gastropub  "
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "melbourne_venues_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Copying the movie dataframe into a new one since we won't need to use the genre information in our first case.\n",
    "venuecategory_df = melbourne_venues_new.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Venue</th>\n",
       "      <th>Venue Category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>Naughty Boy</td>\n",
       "      <td>Breakfast Spot</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>Filou’s Artisan Patissier</td>\n",
       "      <td>Bakery</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>Neighbourhood Wine</td>\n",
       "      <td>Wine Bar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>Gerald's Bar</td>\n",
       "      <td>Wine Bar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>Great Northern Hotel</td>\n",
       "      <td>Gastropub</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Neighbourhood                      Venue  Venue Category\n",
       "0       Carlton                Naughty Boy  Breakfast Spot\n",
       "1       Carlton  Filou’s Artisan Patissier          Bakery\n",
       "2       Carlton         Neighbourhood Wine        Wine Bar\n",
       "3       Carlton               Gerald's Bar        Wine Bar\n",
       "4       Carlton       Great Northern Hotel       Gastropub"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "venuecategory_df = venuecategory_df.drop(['Neighbourhood Latitude', 'Neighbourhood Longitude', 'id', 'Venue Latitude', 'Venue Longitude'], axis=1)\n",
    "\n",
    "venuecategory_df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accessories Store</th>\n",
       "      <th>Aquarium</th>\n",
       "      <th>Arcade</th>\n",
       "      <th>Argentinian Restaurant</th>\n",
       "      <th>Art Gallery</th>\n",
       "      <th>Asian Restaurant</th>\n",
       "      <th>Athletics &amp; Sports</th>\n",
       "      <th>Australian Restaurant</th>\n",
       "      <th>BBQ Joint</th>\n",
       "      <th>Bagel Shop</th>\n",
       "      <th>...</th>\n",
       "      <th>Whisky Bar</th>\n",
       "      <th>Wine Bar</th>\n",
       "      <th>Wine Shop</th>\n",
       "      <th>Wings Joint</th>\n",
       "      <th>Women's Store</th>\n",
       "      <th>Yoga Studio</th>\n",
       "      <th>Yunnan Restaurant</th>\n",
       "      <th>Zoo</th>\n",
       "      <th>Zoo Exhibit</th>\n",
       "      <th>Venue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Naughty Boy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Filou’s Artisan Patissier</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Neighbourhood Wine</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Gerald's Bar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Great Northern Hotel</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 209 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Accessories Store  Aquarium  Arcade  Argentinian Restaurant  Art Gallery  \\\n",
       "0                  0         0       0                       0            0   \n",
       "1                  0         0       0                       0            0   \n",
       "2                  0         0       0                       0            0   \n",
       "3                  0         0       0                       0            0   \n",
       "4                  0         0       0                       0            0   \n",
       "\n",
       "   Asian Restaurant  Athletics & Sports  Australian Restaurant  BBQ Joint  \\\n",
       "0                 0                   0                      0          0   \n",
       "1                 0                   0                      0          0   \n",
       "2                 0                   0                      0          0   \n",
       "3                 0                   0                      0          0   \n",
       "4                 0                   0                      0          0   \n",
       "\n",
       "   Bagel Shop  ...  Whisky Bar  Wine Bar  Wine Shop  Wings Joint  \\\n",
       "0           0  ...           0         0          0            0   \n",
       "1           0  ...           0         0          0            0   \n",
       "2           0  ...           0         1          0            0   \n",
       "3           0  ...           0         1          0            0   \n",
       "4           0  ...           0         0          0            0   \n",
       "\n",
       "   Women's Store  Yoga Studio  Yunnan Restaurant  Zoo  Zoo Exhibit  \\\n",
       "0              0            0                  0    0            0   \n",
       "1              0            0                  0    0            0   \n",
       "2              0            0                  0    0            0   \n",
       "3              0            0                  0    0            0   \n",
       "4              0            0                  0    0            0   \n",
       "\n",
       "                       Venue  \n",
       "0                Naughty Boy  \n",
       "1  Filou’s Artisan Patissier  \n",
       "2         Neighbourhood Wine  \n",
       "3               Gerald's Bar  \n",
       "4       Great Northern Hotel  \n",
       "\n",
       "[5 rows x 209 columns]"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "melbourne_onehot = pd.get_dummies(venuecategory_df[['Venue Category']], prefix=\"\", prefix_sep=\"\")\n",
    "\n",
    "# add neighborhood column back to dataframe\n",
    "melbourne_onehot['Venue'] = melbourne_venues['Venue']\n",
    "\n",
    "fixed_columns = [melbourne_onehot.columns[-1]] + list(melbourne_onehot.columns[:-1])\n",
    "\n",
    "melbourne_onehot.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### To make sense of what venues suits the best choice on preferences\n",
    "\n",
    "I started by making the categories into a dummies matrix to make it easier for further analysis. Don’t mind too much on these data sets as it could be confusing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Venue</th>\n",
       "      <th>Accessories Store</th>\n",
       "      <th>Aquarium</th>\n",
       "      <th>Arcade</th>\n",
       "      <th>Argentinian Restaurant</th>\n",
       "      <th>Art Gallery</th>\n",
       "      <th>Asian Restaurant</th>\n",
       "      <th>Athletics &amp; Sports</th>\n",
       "      <th>Australian Restaurant</th>\n",
       "      <th>BBQ Joint</th>\n",
       "      <th>...</th>\n",
       "      <th>Warehouse Store</th>\n",
       "      <th>Whisky Bar</th>\n",
       "      <th>Wine Bar</th>\n",
       "      <th>Wine Shop</th>\n",
       "      <th>Wings Joint</th>\n",
       "      <th>Women's Store</th>\n",
       "      <th>Yoga Studio</th>\n",
       "      <th>Yunnan Restaurant</th>\n",
       "      <th>Zoo</th>\n",
       "      <th>Zoo Exhibit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Naughty Boy</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Filou’s Artisan Patissier</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Neighbourhood Wine</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Gerald's Bar</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Great Northern Hotel</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 209 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Venue  Accessories Store  Aquarium  Arcade  \\\n",
       "0                Naughty Boy                0.0       0.0     0.0   \n",
       "1  Filou’s Artisan Patissier                0.0       0.0     0.0   \n",
       "2         Neighbourhood Wine                0.0       0.0     0.0   \n",
       "3               Gerald's Bar                0.0       0.0     0.0   \n",
       "4       Great Northern Hotel                0.0       0.0     0.0   \n",
       "\n",
       "   Argentinian Restaurant  Art Gallery  Asian Restaurant  Athletics & Sports  \\\n",
       "0                     0.0          0.0               0.0                 0.0   \n",
       "1                     0.0          0.0               0.0                 0.0   \n",
       "2                     0.0          0.0               0.0                 0.0   \n",
       "3                     0.0          0.0               0.0                 0.0   \n",
       "4                     0.0          0.0               0.0                 0.0   \n",
       "\n",
       "   Australian Restaurant  BBQ Joint  ...  Warehouse Store  Whisky Bar  \\\n",
       "0                    0.0        0.0  ...              0.0         0.0   \n",
       "1                    0.0        0.0  ...              0.0         0.0   \n",
       "2                    0.0        0.0  ...              0.0         0.0   \n",
       "3                    0.0        0.0  ...              0.0         0.0   \n",
       "4                    0.0        0.0  ...              0.0         0.0   \n",
       "\n",
       "   Wine Bar  Wine Shop  Wings Joint  Women's Store  Yoga Studio  \\\n",
       "0       0.0        0.0          0.0            0.0          0.0   \n",
       "1       0.0        0.0          0.0            0.0          0.0   \n",
       "2       1.0        0.0          0.0            0.0          0.0   \n",
       "3       1.0        0.0          0.0            0.0          0.0   \n",
       "4       0.0        0.0          0.0            0.0          0.0   \n",
       "\n",
       "   Yunnan Restaurant  Zoo  Zoo Exhibit  \n",
       "0                0.0  0.0          0.0  \n",
       "1                0.0  0.0          0.0  \n",
       "2                0.0  0.0          0.0  \n",
       "3                0.0  0.0          0.0  \n",
       "4                0.0  0.0          0.0  \n",
       "\n",
       "[5 rows x 209 columns]"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "venue_grouped=melbourne_onehot.groupby(['Venue'], sort=False).mean().reset_index()\n",
    "venue_grouped.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Neighbourhood Latitude</th>\n",
       "      <th>Neighbourhood Longitude</th>\n",
       "      <th>Venue</th>\n",
       "      <th>id</th>\n",
       "      <th>Venue Latitude</th>\n",
       "      <th>Venue Longitude</th>\n",
       "      <th>Venue Category</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Naughty Boy</td>\n",
       "      <td>544affcd498e693acaed575e</td>\n",
       "      <td>-37.784351</td>\n",
       "      <td>144.969688</td>\n",
       "      <td>Breakfast Spot</td>\n",
       "      <td>8.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Filou’s Artisan Patissier</td>\n",
       "      <td>4cae8a5beb65b1f7adf05ccd</td>\n",
       "      <td>-37.787357</td>\n",
       "      <td>144.969448</td>\n",
       "      <td>Bakery</td>\n",
       "      <td>8.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Neighbourhood Wine</td>\n",
       "      <td>51384a8fe4b0828b66c2a7d4</td>\n",
       "      <td>-37.785133</td>\n",
       "      <td>144.977638</td>\n",
       "      <td>Wine Bar</td>\n",
       "      <td>9.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Gerald's Bar</td>\n",
       "      <td>4b0ddfd0f964a520d25123e3</td>\n",
       "      <td>-37.788356</td>\n",
       "      <td>144.972097</td>\n",
       "      <td>Wine Bar</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Great Northern Hotel</td>\n",
       "      <td>4bd175b4b221c9b6f689d5d0</td>\n",
       "      <td>-37.782090</td>\n",
       "      <td>144.973501</td>\n",
       "      <td>Gastropub</td>\n",
       "      <td>7.7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Neighbourhood  Neighbourhood Latitude  Neighbourhood Longitude  \\\n",
       "0       Carlton              -37.784337               144.969747   \n",
       "1       Carlton              -37.784337               144.969747   \n",
       "2       Carlton              -37.784337               144.969747   \n",
       "3       Carlton              -37.784337               144.969747   \n",
       "4       Carlton              -37.784337               144.969747   \n",
       "\n",
       "                       Venue                        id  Venue Latitude  \\\n",
       "0                Naughty Boy  544affcd498e693acaed575e      -37.784351   \n",
       "1  Filou’s Artisan Patissier  4cae8a5beb65b1f7adf05ccd      -37.787357   \n",
       "2         Neighbourhood Wine  51384a8fe4b0828b66c2a7d4      -37.785133   \n",
       "3               Gerald's Bar  4b0ddfd0f964a520d25123e3      -37.788356   \n",
       "4       Great Northern Hotel  4bd175b4b221c9b6f689d5d0      -37.782090   \n",
       "\n",
       "   Venue Longitude  Venue Category rating  \n",
       "0       144.969688  Breakfast Spot    8.1  \n",
       "1       144.969448          Bakery    8.4  \n",
       "2       144.977638        Wine Bar    9.1  \n",
       "3       144.972097        Wine Bar    8.0  \n",
       "4       144.973501       Gastropub    7.7  "
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ratings_df=melbourne_venues.copy()\n",
    "ratings_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Venue</th>\n",
       "      <th>id</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Naughty Boy</td>\n",
       "      <td>544affcd498e693acaed575e</td>\n",
       "      <td>8.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Filou’s Artisan Patissier</td>\n",
       "      <td>4cae8a5beb65b1f7adf05ccd</td>\n",
       "      <td>8.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Neighbourhood Wine</td>\n",
       "      <td>51384a8fe4b0828b66c2a7d4</td>\n",
       "      <td>9.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Gerald's Bar</td>\n",
       "      <td>4b0ddfd0f964a520d25123e3</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Great Northern Hotel</td>\n",
       "      <td>4bd175b4b221c9b6f689d5d0</td>\n",
       "      <td>7.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1422</th>\n",
       "      <td>H&amp;M</td>\n",
       "      <td>5a111b011755622302b74f92</td>\n",
       "      <td>not rated</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1423</th>\n",
       "      <td>capri @the quays cafe</td>\n",
       "      <td>580174e338fa472b0c88749a</td>\n",
       "      <td>not rated</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1424</th>\n",
       "      <td>Shiraaz Indian</td>\n",
       "      <td>4dbd2f181e72b351cac4c11b</td>\n",
       "      <td>not rated</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1425</th>\n",
       "      <td>In Season Thai Cuisine</td>\n",
       "      <td>4ba74580f964a520028939e3</td>\n",
       "      <td>not rated</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1426</th>\n",
       "      <td>Tram Stop D2</td>\n",
       "      <td>4d32deb45c2db60c782ac66c</td>\n",
       "      <td>not rated</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1427 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                          Venue                        id     rating\n",
       "0                   Naughty Boy  544affcd498e693acaed575e        8.1\n",
       "1     Filou’s Artisan Patissier  4cae8a5beb65b1f7adf05ccd        8.4\n",
       "2            Neighbourhood Wine  51384a8fe4b0828b66c2a7d4        9.1\n",
       "3                  Gerald's Bar  4b0ddfd0f964a520d25123e3        8.0\n",
       "4          Great Northern Hotel  4bd175b4b221c9b6f689d5d0        7.7\n",
       "...                         ...                       ...        ...\n",
       "1422                        H&M  5a111b011755622302b74f92  not rated\n",
       "1423      capri @the quays cafe  580174e338fa472b0c88749a  not rated\n",
       "1424             Shiraaz Indian  4dbd2f181e72b351cac4c11b  not rated\n",
       "1425     In Season Thai Cuisine  4ba74580f964a520028939e3  not rated\n",
       "1426               Tram Stop D2  4d32deb45c2db60c782ac66c  not rated\n",
       "\n",
       "[1427 rows x 3 columns]"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ratings_df_drop = ratings_df.drop(['Neighbourhood', 'Neighbourhood Latitude', 'Neighbourhood Longitude',  \n",
    "                                   'Venue Latitude', 'Venue Longitude', 'Venue Category'], axis=1)\n",
    "ratings_df_drop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Venue</th>\n",
       "      <th>id</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Naughty Boy</td>\n",
       "      <td>544affcd498e693acaed575e</td>\n",
       "      <td>8.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Filou’s Artisan Patissier</td>\n",
       "      <td>4cae8a5beb65b1f7adf05ccd</td>\n",
       "      <td>8.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Neighbourhood Wine</td>\n",
       "      <td>51384a8fe4b0828b66c2a7d4</td>\n",
       "      <td>9.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Gerald's Bar</td>\n",
       "      <td>4b0ddfd0f964a520d25123e3</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Great Northern Hotel</td>\n",
       "      <td>4bd175b4b221c9b6f689d5d0</td>\n",
       "      <td>7.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>400</th>\n",
       "      <td>Ha Long Bay</td>\n",
       "      <td>4b161ecaf964a52008b723e3</td>\n",
       "      <td>6.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>401</th>\n",
       "      <td>Tokyo House</td>\n",
       "      <td>4bd7abd709ecb713947b477c</td>\n",
       "      <td>6.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>402</th>\n",
       "      <td>Noodle World</td>\n",
       "      <td>4b0b94f5f964a520663223e3</td>\n",
       "      <td>6.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>403</th>\n",
       "      <td>Richmond Rush Cafe</td>\n",
       "      <td>4b4a9cf0f964a520908b26e3</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>404</th>\n",
       "      <td>Holliava</td>\n",
       "      <td>4b27454ff964a5208e8524e3</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>405 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Venue                        id rating\n",
       "0                  Naughty Boy  544affcd498e693acaed575e    8.1\n",
       "1    Filou’s Artisan Patissier  4cae8a5beb65b1f7adf05ccd    8.4\n",
       "2           Neighbourhood Wine  51384a8fe4b0828b66c2a7d4    9.1\n",
       "3                 Gerald's Bar  4b0ddfd0f964a520d25123e3    8.0\n",
       "4         Great Northern Hotel  4bd175b4b221c9b6f689d5d0    7.7\n",
       "..                         ...                       ...    ...\n",
       "400                Ha Long Bay  4b161ecaf964a52008b723e3    6.2\n",
       "401                Tokyo House  4bd7abd709ecb713947b477c    6.2\n",
       "402               Noodle World  4b0b94f5f964a520663223e3    6.1\n",
       "403         Richmond Rush Cafe  4b4a9cf0f964a520908b26e3    6.0\n",
       "404                   Holliava  4b27454ff964a5208e8524e3    6.0\n",
       "\n",
       "[405 rows x 3 columns]"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data = ratings_df_drop[ratings_df_drop['rating'] != 'not rated']\n",
    "final_data.reset_index(inplace=True)\n",
    "final_data=final_data.drop(['index'],axis=1)\n",
    "final_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Venue      object\n",
       "id         object\n",
       "rating    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data[\"rating\"] = final_data.rating.astype(float)\n",
    "final_data.dtypes"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Let’s assume \n",
    "\n",
    "I went on a trip to Melbourne and rated these 5 venues I visited. Below this is my assumption_user dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Venue     object\n",
      "rating     int64\n",
      "dtype: object\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Venue</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Neighbourhood Wine</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Holliava</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Caltex Safeway</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Gelobar</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Richmond Rush Cafe</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Venue  rating\n",
       "0  Neighbourhood Wine       8\n",
       "1            Holliava       6\n",
       "2      Caltex Safeway       7\n",
       "3             Gelobar       9\n",
       "4  Richmond Rush Cafe       8"
      ]
     },
     "execution_count": 235,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "user_Input = [\n",
    "            {'Venue':'Neighbourhood Wine', 'rating':8},\n",
    "            {'Venue':'Holliava', 'rating':6},\n",
    "            {'Venue':'Caltex Safeway', 'rating':7},\n",
    "            {'Venue':'Gelobar', 'rating':9},\n",
    "            {'Venue':'Richmond Rush Cafe', 'rating':8}\n",
    "         ] \n",
    "\n",
    "\n",
    "input_Venue = pd.DataFrame(user_Input)\n",
    "print(input_Venue.dtypes)\n",
    "input_Venue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Venue      object\n",
       "rating    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 236,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "input_Venue[\"rating\"] = input_Venue.rating.astype(float)\n",
    "input_Venue.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Neighbourhood Latitude</th>\n",
       "      <th>Neighbourhood Longitude</th>\n",
       "      <th>Venue</th>\n",
       "      <th>id</th>\n",
       "      <th>Venue Latitude</th>\n",
       "      <th>Venue Longitude</th>\n",
       "      <th>Venue Category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Neighbourhood Wine</td>\n",
       "      <td>51384a8fe4b0828b66c2a7d4</td>\n",
       "      <td>-37.785133</td>\n",
       "      <td>144.977638</td>\n",
       "      <td>Wine Bar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Gelobar</td>\n",
       "      <td>4b309abaf964a52066fa24e3</td>\n",
       "      <td>-37.776441</td>\n",
       "      <td>144.970986</td>\n",
       "      <td>Dessert Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>142</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.778987</td>\n",
       "      <td>145.002600</td>\n",
       "      <td>Caltex Safeway</td>\n",
       "      <td>4c326b84213c2d7f4c75355d</td>\n",
       "      <td>-37.783735</td>\n",
       "      <td>145.009324</td>\n",
       "      <td>Gas Station</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>Carlton North</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Neighbourhood Wine</td>\n",
       "      <td>51384a8fe4b0828b66c2a7d4</td>\n",
       "      <td>-37.785133</td>\n",
       "      <td>144.977638</td>\n",
       "      <td>Wine Bar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>175</th>\n",
       "      <td>Carlton North</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Gelobar</td>\n",
       "      <td>4b309abaf964a52066fa24e3</td>\n",
       "      <td>-37.776441</td>\n",
       "      <td>144.970986</td>\n",
       "      <td>Dessert Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>269</th>\n",
       "      <td>Carlton North</td>\n",
       "      <td>-37.780995</td>\n",
       "      <td>144.962792</td>\n",
       "      <td>Gelobar</td>\n",
       "      <td>4b309abaf964a52066fa24e3</td>\n",
       "      <td>-37.776441</td>\n",
       "      <td>144.970986</td>\n",
       "      <td>Dessert Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>497</th>\n",
       "      <td>East Melbourne</td>\n",
       "      <td>-37.816640</td>\n",
       "      <td>144.987811</td>\n",
       "      <td>Richmond Rush Cafe</td>\n",
       "      <td>4b4a9cf0f964a520908b26e3</td>\n",
       "      <td>-37.823577</td>\n",
       "      <td>144.989324</td>\n",
       "      <td>Coffee Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>498</th>\n",
       "      <td>East Melbourne</td>\n",
       "      <td>-37.816640</td>\n",
       "      <td>144.987811</td>\n",
       "      <td>Holliava</td>\n",
       "      <td>4b27454ff964a5208e8524e3</td>\n",
       "      <td>-37.824858</td>\n",
       "      <td>144.990327</td>\n",
       "      <td>Bar</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Neighbourhood  Neighbourhood Latitude  Neighbourhood Longitude  \\\n",
       "2           Carlton              -37.784337               144.969747   \n",
       "32          Carlton              -37.784337               144.969747   \n",
       "142         Carlton              -37.778987               145.002600   \n",
       "145   Carlton North              -37.784337               144.969747   \n",
       "175   Carlton North              -37.784337               144.969747   \n",
       "269   Carlton North              -37.780995               144.962792   \n",
       "497  East Melbourne              -37.816640               144.987811   \n",
       "498  East Melbourne              -37.816640               144.987811   \n",
       "\n",
       "                  Venue                        id  Venue Latitude  \\\n",
       "2    Neighbourhood Wine  51384a8fe4b0828b66c2a7d4      -37.785133   \n",
       "32              Gelobar  4b309abaf964a52066fa24e3      -37.776441   \n",
       "142      Caltex Safeway  4c326b84213c2d7f4c75355d      -37.783735   \n",
       "145  Neighbourhood Wine  51384a8fe4b0828b66c2a7d4      -37.785133   \n",
       "175             Gelobar  4b309abaf964a52066fa24e3      -37.776441   \n",
       "269             Gelobar  4b309abaf964a52066fa24e3      -37.776441   \n",
       "497  Richmond Rush Cafe  4b4a9cf0f964a520908b26e3      -37.823577   \n",
       "498            Holliava  4b27454ff964a5208e8524e3      -37.824858   \n",
       "\n",
       "     Venue Longitude Venue Category  \n",
       "2         144.977638       Wine Bar  \n",
       "32        144.970986   Dessert Shop  \n",
       "142       145.009324    Gas Station  \n",
       "145       144.977638       Wine Bar  \n",
       "175       144.970986   Dessert Shop  \n",
       "269       144.970986   Dessert Shop  \n",
       "497       144.989324    Coffee Shop  \n",
       "498       144.990327            Bar  "
      ]
     },
     "execution_count": 237,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Filtering out the movies by title\n",
    "input_Id = melbourne_venues_new[melbourne_venues_new['Venue'].isin(inputVenue['Venue'].tolist())]\n",
    "input_Id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Venue</th>\n",
       "      <th>id</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Neighbourhood Wine</td>\n",
       "      <td>51384a8fe4b0828b66c2a7d4</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Neighbourhood Wine</td>\n",
       "      <td>51384a8fe4b0828b66c2a7d4</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Gelobar</td>\n",
       "      <td>4b309abaf964a52066fa24e3</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Gelobar</td>\n",
       "      <td>4b309abaf964a52066fa24e3</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Gelobar</td>\n",
       "      <td>4b309abaf964a52066fa24e3</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Caltex Safeway</td>\n",
       "      <td>4c326b84213c2d7f4c75355d</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Richmond Rush Cafe</td>\n",
       "      <td>4b4a9cf0f964a520908b26e3</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Holliava</td>\n",
       "      <td>4b27454ff964a5208e8524e3</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Venue                        id  rating\n",
       "0  Neighbourhood Wine  51384a8fe4b0828b66c2a7d4     8.0\n",
       "1  Neighbourhood Wine  51384a8fe4b0828b66c2a7d4     8.0\n",
       "2             Gelobar  4b309abaf964a52066fa24e3     9.0\n",
       "3             Gelobar  4b309abaf964a52066fa24e3     9.0\n",
       "4             Gelobar  4b309abaf964a52066fa24e3     9.0\n",
       "5      Caltex Safeway  4c326b84213c2d7f4c75355d     7.0\n",
       "6  Richmond Rush Cafe  4b4a9cf0f964a520908b26e3     8.0\n",
       "7            Holliava  4b27454ff964a5208e8524e3     6.0"
      ]
     },
     "execution_count": 238,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Then merging it so we can get the movieId. It's implicitly merging it by title.\n",
    "input_id_venue = pd.merge(input_Id, inputVenue)\n",
    "#Dropping information we won't use from the input dataframe\n",
    "input_final = input_id_venue.drop(['Neighbourhood', 'Neighbourhood Latitude', 'Neighbourhood Longitude', \n",
    "                                   'Venue Latitude', 'Venue Longitude', 'Venue Category'], axis=1)\n",
    "\n",
    "input_final\n",
    "#Final input dataframe\n",
    "#If a movie you added in above isn't here, then it might not be in the original \n",
    "#dataframe or it might spelled differently, please check capitalisation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Venue</th>\n",
       "      <th>id</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Neighbourhood Wine</td>\n",
       "      <td>51384a8fe4b0828b66c2a7d4</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Neighbourhood Wine</td>\n",
       "      <td>51384a8fe4b0828b66c2a7d4</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Gelobar</td>\n",
       "      <td>4b309abaf964a52066fa24e3</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Gelobar</td>\n",
       "      <td>4b309abaf964a52066fa24e3</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Gelobar</td>\n",
       "      <td>4b309abaf964a52066fa24e3</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Caltex Safeway</td>\n",
       "      <td>4c326b84213c2d7f4c75355d</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Richmond Rush Cafe</td>\n",
       "      <td>4b4a9cf0f964a520908b26e3</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Holliava</td>\n",
       "      <td>4b27454ff964a5208e8524e3</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Venue                        id  rating\n",
       "0  Neighbourhood Wine  51384a8fe4b0828b66c2a7d4     8.0\n",
       "1  Neighbourhood Wine  51384a8fe4b0828b66c2a7d4     8.0\n",
       "2             Gelobar  4b309abaf964a52066fa24e3     9.0\n",
       "3             Gelobar  4b309abaf964a52066fa24e3     9.0\n",
       "4             Gelobar  4b309abaf964a52066fa24e3     9.0\n",
       "5      Caltex Safeway  4c326b84213c2d7f4c75355d     7.0\n",
       "6  Richmond Rush Cafe  4b4a9cf0f964a520908b26e3     8.0\n",
       "7            Holliava  4b27454ff964a5208e8524e3     6.0"
      ]
     },
     "execution_count": 239,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "input_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Venue</th>\n",
       "      <th>id</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Neighbourhood Wine</td>\n",
       "      <td>51384a8fe4b0828b66c2a7d4</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Gelobar</td>\n",
       "      <td>4b309abaf964a52066fa24e3</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Caltex Safeway</td>\n",
       "      <td>4c326b84213c2d7f4c75355d</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Richmond Rush Cafe</td>\n",
       "      <td>4b4a9cf0f964a520908b26e3</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Holliava</td>\n",
       "      <td>4b27454ff964a5208e8524e3</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Venue                        id  rating\n",
       "0  Neighbourhood Wine  51384a8fe4b0828b66c2a7d4     8.0\n",
       "1             Gelobar  4b309abaf964a52066fa24e3     9.0\n",
       "2      Caltex Safeway  4c326b84213c2d7f4c75355d     7.0\n",
       "3  Richmond Rush Cafe  4b4a9cf0f964a520908b26e3     8.0\n",
       "4            Holliava  4b27454ff964a5208e8524e3     6.0"
      ]
     },
     "execution_count": 240,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Deleting Duplicate Rows to Make the Dataset beautiful and precise and resetting the index start from 0 again\n",
    "input_final=input_final.drop_duplicates().reset_index(drop=True)\n",
    "input_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Venue</th>\n",
       "      <th>Accessories Store</th>\n",
       "      <th>Aquarium</th>\n",
       "      <th>Arcade</th>\n",
       "      <th>Argentinian Restaurant</th>\n",
       "      <th>Art Gallery</th>\n",
       "      <th>Asian Restaurant</th>\n",
       "      <th>Athletics &amp; Sports</th>\n",
       "      <th>Australian Restaurant</th>\n",
       "      <th>BBQ Joint</th>\n",
       "      <th>...</th>\n",
       "      <th>Warehouse Store</th>\n",
       "      <th>Whisky Bar</th>\n",
       "      <th>Wine Bar</th>\n",
       "      <th>Wine Shop</th>\n",
       "      <th>Wings Joint</th>\n",
       "      <th>Women's Store</th>\n",
       "      <th>Yoga Studio</th>\n",
       "      <th>Yunnan Restaurant</th>\n",
       "      <th>Zoo</th>\n",
       "      <th>Zoo Exhibit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Neighbourhood Wine</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Gelobar</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>142</th>\n",
       "      <td>Caltex Safeway</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>371</th>\n",
       "      <td>Richmond Rush Cafe</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>372</th>\n",
       "      <td>Holliava</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 209 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Venue  Accessories Store  Aquarium  Arcade  \\\n",
       "2    Neighbourhood Wine                0.0       0.0     0.0   \n",
       "32              Gelobar                0.0       0.0     0.0   \n",
       "142      Caltex Safeway                0.0       0.0     0.0   \n",
       "371  Richmond Rush Cafe                0.0       0.0     0.0   \n",
       "372            Holliava                0.0       0.0     0.0   \n",
       "\n",
       "     Argentinian Restaurant  Art Gallery  Asian Restaurant  \\\n",
       "2                       0.0          0.0               0.0   \n",
       "32                      0.0          0.0               0.0   \n",
       "142                     0.0          0.0               0.0   \n",
       "371                     0.0          0.0               0.0   \n",
       "372                     0.0          0.0               0.0   \n",
       "\n",
       "     Athletics & Sports  Australian Restaurant  BBQ Joint  ...  \\\n",
       "2                   0.0                    0.0        0.0  ...   \n",
       "32                  0.0                    0.0        0.0  ...   \n",
       "142                 0.0                    0.0        0.0  ...   \n",
       "371                 0.0                    0.0        0.0  ...   \n",
       "372                 0.0                    0.0        0.0  ...   \n",
       "\n",
       "     Warehouse Store  Whisky Bar  Wine Bar  Wine Shop  Wings Joint  \\\n",
       "2                0.0         0.0       1.0        0.0          0.0   \n",
       "32               0.0         0.0       0.0        0.0          0.0   \n",
       "142              0.0         0.0       0.0        0.0          0.0   \n",
       "371              0.0         0.0       0.0        0.0          0.0   \n",
       "372              0.0         0.0       0.0        0.0          0.0   \n",
       "\n",
       "     Women's Store  Yoga Studio  Yunnan Restaurant  Zoo  Zoo Exhibit  \n",
       "2              0.0          0.0                0.0  0.0          0.0  \n",
       "32             0.0          0.0                0.0  0.0          0.0  \n",
       "142            0.0          0.0                0.0  0.0          0.0  \n",
       "371            0.0          0.0                0.0  0.0          0.0  \n",
       "372            0.0          0.0                0.0  0.0          0.0  \n",
       "\n",
       "[5 rows x 209 columns]"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "myVenue = venue_grouped[venue_grouped['Venue'].isin(input_final['Venue'].tolist())].\n",
    "myVenue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accessories Store</th>\n",
       "      <th>Aquarium</th>\n",
       "      <th>Arcade</th>\n",
       "      <th>Argentinian Restaurant</th>\n",
       "      <th>Art Gallery</th>\n",
       "      <th>Asian Restaurant</th>\n",
       "      <th>Athletics &amp; Sports</th>\n",
       "      <th>Australian Restaurant</th>\n",
       "      <th>BBQ Joint</th>\n",
       "      <th>Bagel Shop</th>\n",
       "      <th>...</th>\n",
       "      <th>Warehouse Store</th>\n",
       "      <th>Whisky Bar</th>\n",
       "      <th>Wine Bar</th>\n",
       "      <th>Wine Shop</th>\n",
       "      <th>Wings Joint</th>\n",
       "      <th>Women's Store</th>\n",
       "      <th>Yoga Studio</th>\n",
       "      <th>Yunnan Restaurant</th>\n",
       "      <th>Zoo</th>\n",
       "      <th>Zoo Exhibit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 208 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Accessories Store  Aquarium  Arcade  Argentinian Restaurant  Art Gallery  \\\n",
       "0                0.0       0.0     0.0                     0.0          0.0   \n",
       "1                0.0       0.0     0.0                     0.0          0.0   \n",
       "2                0.0       0.0     0.0                     0.0          0.0   \n",
       "3                0.0       0.0     0.0                     0.0          0.0   \n",
       "4                0.0       0.0     0.0                     0.0          0.0   \n",
       "\n",
       "   Asian Restaurant  Athletics & Sports  Australian Restaurant  BBQ Joint  \\\n",
       "0               0.0                 0.0                    0.0        0.0   \n",
       "1               0.0                 0.0                    0.0        0.0   \n",
       "2               0.0                 0.0                    0.0        0.0   \n",
       "3               0.0                 0.0                    0.0        0.0   \n",
       "4               0.0                 0.0                    0.0        0.0   \n",
       "\n",
       "   Bagel Shop  ...  Warehouse Store  Whisky Bar  Wine Bar  Wine Shop  \\\n",
       "0         0.0  ...              0.0         0.0       1.0        0.0   \n",
       "1         0.0  ...              0.0         0.0       0.0        0.0   \n",
       "2         0.0  ...              0.0         0.0       0.0        0.0   \n",
       "3         0.0  ...              0.0         0.0       0.0        0.0   \n",
       "4         0.0  ...              0.0         0.0       0.0        0.0   \n",
       "\n",
       "   Wings Joint  Women's Store  Yoga Studio  Yunnan Restaurant  Zoo  \\\n",
       "0          0.0            0.0          0.0                0.0  0.0   \n",
       "1          0.0            0.0          0.0                0.0  0.0   \n",
       "2          0.0            0.0          0.0                0.0  0.0   \n",
       "3          0.0            0.0          0.0                0.0  0.0   \n",
       "4          0.0            0.0          0.0                0.0  0.0   \n",
       "\n",
       "   Zoo Exhibit  \n",
       "0          0.0  \n",
       "1          0.0  \n",
       "2          0.0  \n",
       "3          0.0  \n",
       "4          0.0  \n",
       "\n",
       "[5 rows x 208 columns]"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Resetting the index to avoid future issues\n",
    "myVenue = myVenue.reset_index(drop=True)\n",
    "#Dropping unnecessary issues due to save memory and to avoid issues\n",
    "myCategoryTable = myVenue.drop('Venue', 1)\n",
    "myCategoryTable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    8.0\n",
       "1    9.0\n",
       "2    7.0\n",
       "3    8.0\n",
       "4    6.0\n",
       "Name: rating, dtype: float64"
      ]
     },
     "execution_count": 241,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "input_final['rating']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Accessories Store         0.0\n",
       "Aquarium                  0.0\n",
       "Arcade                    0.0\n",
       "Argentinian Restaurant    0.0\n",
       "Art Gallery               0.0\n",
       "                         ... \n",
       "Women's Store             0.0\n",
       "Yoga Studio               0.0\n",
       "Yunnan Restaurant         0.0\n",
       "Zoo                       0.0\n",
       "Zoo Exhibit               0.0\n",
       "Length: 208, dtype: float64"
      ]
     },
     "execution_count": 271,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Already Series data#\n",
    "#Dot produt to get weights\n",
    "myProfile = myCategoryTable.transpose().dot(input_final['rating'])\n",
    "#The user profile\n",
    "myProfile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Accessories Store         float64\n",
       "Aquarium                  float64\n",
       "Arcade                    float64\n",
       "Argentinian Restaurant    float64\n",
       "Art Gallery               float64\n",
       "                           ...   \n",
       "Women's Store             float64\n",
       "Yoga Studio               float64\n",
       "Yunnan Restaurant         float64\n",
       "Zoo                       float64\n",
       "Zoo Exhibit               float64\n",
       "Length: 208, dtype: object"
      ]
     },
     "execution_count": 278,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "categoryTable = venue_grouped.set_index(venue_grouped['Venue'])\n",
    "#And drop the unnecessary information\n",
    "categoryTable_new = categoryTable.drop('Venue', 1)\n",
    "#Reassuring Data Type\n",
    "categoryTable_new.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1089, 208)"
      ]
     },
     "execution_count": 247,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "categoryTable_new.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Venue\n",
       "Naughty Boy                  0.0\n",
       "Filou’s Artisan Patissier    0.0\n",
       "Neighbourhood Wine           8.0\n",
       "Gerald's Bar                 8.0\n",
       "Great Northern Hotel         0.0\n",
       "                            ... \n",
       "H&M                          0.0\n",
       "capri @the quays cafe        0.0\n",
       "Shiraaz Indian               0.0\n",
       "In Season Thai Cuisine       0.0\n",
       "Tram Stop D2                 0.0\n",
       "Length: 1089, dtype: float64"
      ]
     },
     "execution_count": 301,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Multiply the categories by the weights and then take the weighted average\n",
    "x = ((categoryTable_new*myProfile).sum(axis=1))\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = (myProfile.sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Venue\n",
       "Naughty Boy                  0.000000\n",
       "Filou’s Artisan Patissier    0.000000\n",
       "Neighbourhood Wine           0.210526\n",
       "Gerald's Bar                 0.210526\n",
       "Great Northern Hotel         0.000000\n",
       "                               ...   \n",
       "H&M                          0.000000\n",
       "capri @the quays cafe        0.000000\n",
       "Shiraaz Indian               0.000000\n",
       "In Season Thai Cuisine       0.000000\n",
       "Tram Stop D2                 0.000000\n",
       "Length: 1089, dtype: float64"
      ]
     },
     "execution_count": 303,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "recommendationTable_df = x/y\n",
    "recommendationTable_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "My parameter for recommendation is a content-based filtering on the ‘Venue Category’ in which I let the machine to build recommendations based on my ratings on the venue’s category in the previous dataset. And by adding some kick in the algorithm I come up with matrices and resulted with dotting the ‘Venue’ to get each ‘Venue’ weights from the total dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Venue\n",
       "Chocolateria San Churro          0.236842\n",
       "Black Waffle                     0.236842\n",
       "Burch & Purchese Sweet Studio    0.236842\n",
       "LuxBite                          0.236842\n",
       "Dessert Story                    0.236842\n",
       "                                   ...   \n",
       "D.O.C Espresso                   0.000000\n",
       "Kaprica                          0.000000\n",
       "Vincent The Dog                  0.000000\n",
       "Nature Play Park                 0.000000\n",
       "Naughty Boy                      0.000000\n",
       "Length: 1089, dtype: float64"
      ]
     },
     "execution_count": 304,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Sort our recommendations in descending order\n",
    "recommendationTable_df_sorted = recommendationTable_df.sort_values(ascending=False)\n",
    "#Just a peek at the values\n",
    "recommendationTable_df_sorted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 337,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_recommendation_df_all = melbourne_venues_new.loc[melbourne_venues_new['Venue'].isin(recommendationTable_df_sorted.head(20).keys())]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Voila! And resulted with a recommendation list of Venues that in this case build by only a glimpse data of my previous score rating on nearby venues. Also by viewing the recommendation datasets below, we could assume that my user preferences is majoring in ‘Dessert Shops’, ‘Coffee Shops’, ‘Wine Bar’ categories."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 339,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Neighbourhood Latitude</th>\n",
       "      <th>Neighbourhood Longitude</th>\n",
       "      <th>Venue</th>\n",
       "      <th>id</th>\n",
       "      <th>Venue Latitude</th>\n",
       "      <th>Venue Longitude</th>\n",
       "      <th>Venue Category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.778987</td>\n",
       "      <td>145.002600</td>\n",
       "      <td>Black Waffle</td>\n",
       "      <td>5889c670561ded0e0cdcf83c</td>\n",
       "      <td>-37.772534</td>\n",
       "      <td>144.998427</td>\n",
       "      <td>Dessert Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>269</th>\n",
       "      <td>Carlton North</td>\n",
       "      <td>-37.780995</td>\n",
       "      <td>144.962792</td>\n",
       "      <td>Gelobar</td>\n",
       "      <td>4b309abaf964a52066fa24e3</td>\n",
       "      <td>-37.776441</td>\n",
       "      <td>144.970986</td>\n",
       "      <td>Dessert Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>497</th>\n",
       "      <td>East Melbourne</td>\n",
       "      <td>-37.816640</td>\n",
       "      <td>144.987811</td>\n",
       "      <td>Richmond Rush Cafe</td>\n",
       "      <td>4b4a9cf0f964a520908b26e3</td>\n",
       "      <td>-37.823577</td>\n",
       "      <td>144.989324</td>\n",
       "      <td>Coffee Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>602</th>\n",
       "      <td>Flemington, Kensington</td>\n",
       "      <td>-37.794333</td>\n",
       "      <td>144.929217</td>\n",
       "      <td>Wolf and Hound</td>\n",
       "      <td>551aaadd498eb847ed7d9d5a</td>\n",
       "      <td>-37.786564</td>\n",
       "      <td>144.929076</td>\n",
       "      <td>Coffee Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>629</th>\n",
       "      <td>Flemington, Kensington</td>\n",
       "      <td>-37.794333</td>\n",
       "      <td>144.929217</td>\n",
       "      <td>Dessert Story</td>\n",
       "      <td>517d11cd498e0661e28448cb</td>\n",
       "      <td>-37.788000</td>\n",
       "      <td>144.929920</td>\n",
       "      <td>Dessert Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>748</th>\n",
       "      <td>Melbourne</td>\n",
       "      <td>-37.814563</td>\n",
       "      <td>144.970267</td>\n",
       "      <td>La Belle Miette</td>\n",
       "      <td>51c8eb47498ed8c19c9fc387</td>\n",
       "      <td>-37.813610</td>\n",
       "      <td>144.973348</td>\n",
       "      <td>Dessert Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>854</th>\n",
       "      <td>North Melbourne</td>\n",
       "      <td>-37.905996</td>\n",
       "      <td>145.056254</td>\n",
       "      <td>Common Ground</td>\n",
       "      <td>514505b7e4b0fd5cba96d65d</td>\n",
       "      <td>-37.905658</td>\n",
       "      <td>145.052635</td>\n",
       "      <td>Coffee Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>878</th>\n",
       "      <td>Parkville</td>\n",
       "      <td>-37.796152</td>\n",
       "      <td>144.961351</td>\n",
       "      <td>Standing Room</td>\n",
       "      <td>56b14e3e498e18541d770482</td>\n",
       "      <td>-37.797294</td>\n",
       "      <td>144.962919</td>\n",
       "      <td>Coffee Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>880</th>\n",
       "      <td>Parkville</td>\n",
       "      <td>-37.796152</td>\n",
       "      <td>144.961351</td>\n",
       "      <td>Carlton Wine Room</td>\n",
       "      <td>4de1faa0c65b7a3e21100fd3</td>\n",
       "      <td>-37.798584</td>\n",
       "      <td>144.968610</td>\n",
       "      <td>Wine Bar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>882</th>\n",
       "      <td>Parkville</td>\n",
       "      <td>-37.796152</td>\n",
       "      <td>144.961351</td>\n",
       "      <td>House Of Cards</td>\n",
       "      <td>51d9eaad498e4254d6e50135</td>\n",
       "      <td>-37.799243</td>\n",
       "      <td>144.961597</td>\n",
       "      <td>Coffee Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>Parkville</td>\n",
       "      <td>-37.796152</td>\n",
       "      <td>144.961351</td>\n",
       "      <td>The Vertue of the Coffee Drink</td>\n",
       "      <td>54dc008d498e2dfd2baecf7c</td>\n",
       "      <td>-37.797648</td>\n",
       "      <td>144.968365</td>\n",
       "      <td>Coffee Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>908</th>\n",
       "      <td>Parkville</td>\n",
       "      <td>-37.796152</td>\n",
       "      <td>144.961351</td>\n",
       "      <td>Koko Black</td>\n",
       "      <td>4b0881c7f964a520570d23e3</td>\n",
       "      <td>-37.801804</td>\n",
       "      <td>144.966723</td>\n",
       "      <td>Dessert Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1023</th>\n",
       "      <td>Port Melbourne</td>\n",
       "      <td>-37.829244</td>\n",
       "      <td>144.956207</td>\n",
       "      <td>Bibelot</td>\n",
       "      <td>554d7d38498e0a16ae46ff55</td>\n",
       "      <td>-37.832553</td>\n",
       "      <td>144.958152</td>\n",
       "      <td>Dessert Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1208</th>\n",
       "      <td>Southbank, South Wharf</td>\n",
       "      <td>-37.823258</td>\n",
       "      <td>144.965926</td>\n",
       "      <td>Le Petit Gâteau</td>\n",
       "      <td>4b0f401ff964a520d66023e3</td>\n",
       "      <td>-37.816254</td>\n",
       "      <td>144.959585</td>\n",
       "      <td>Dessert Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1236</th>\n",
       "      <td>South Yarra</td>\n",
       "      <td>-37.837883</td>\n",
       "      <td>144.991123</td>\n",
       "      <td>Burch &amp; Purchese Sweet Studio</td>\n",
       "      <td>4dae8e6b6a23e6c9348c4c55</td>\n",
       "      <td>-37.837736</td>\n",
       "      <td>144.995938</td>\n",
       "      <td>Dessert Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1237</th>\n",
       "      <td>South Yarra</td>\n",
       "      <td>-37.837883</td>\n",
       "      <td>144.991123</td>\n",
       "      <td>The Final Step</td>\n",
       "      <td>4b86ebabf964a520f4a531e3</td>\n",
       "      <td>-37.838580</td>\n",
       "      <td>144.990273</td>\n",
       "      <td>Coffee Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1240</th>\n",
       "      <td>South Yarra</td>\n",
       "      <td>-37.837883</td>\n",
       "      <td>144.991123</td>\n",
       "      <td>LuxBite</td>\n",
       "      <td>4c883ed897828cfa2dc49aaa</td>\n",
       "      <td>-37.838482</td>\n",
       "      <td>144.987822</td>\n",
       "      <td>Dessert Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1298</th>\n",
       "      <td>South Yarra</td>\n",
       "      <td>-37.837883</td>\n",
       "      <td>144.991123</td>\n",
       "      <td>Frozen By A Thousand Blessings</td>\n",
       "      <td>52634f6511d22d57fc9616e9</td>\n",
       "      <td>-37.837428</td>\n",
       "      <td>144.995967</td>\n",
       "      <td>Dessert Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1351</th>\n",
       "      <td>West Melbourne</td>\n",
       "      <td>-37.806255</td>\n",
       "      <td>144.941123</td>\n",
       "      <td>Chocolateria San Churro</td>\n",
       "      <td>4c393623ae2da593813e02c6</td>\n",
       "      <td>-37.812009</td>\n",
       "      <td>144.937244</td>\n",
       "      <td>Dessert Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1373</th>\n",
       "      <td>West Melbourne</td>\n",
       "      <td>-37.806255</td>\n",
       "      <td>144.941123</td>\n",
       "      <td>Gelateria on the Docks</td>\n",
       "      <td>5559c695498eb806ef4e37a1</td>\n",
       "      <td>-37.812369</td>\n",
       "      <td>144.937667</td>\n",
       "      <td>Dessert Shop</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Neighbourhood  Neighbourhood Latitude  Neighbourhood Longitude  \\\n",
       "118                  Carlton              -37.778987               145.002600   \n",
       "269            Carlton North              -37.780995               144.962792   \n",
       "497           East Melbourne              -37.816640               144.987811   \n",
       "602   Flemington, Kensington              -37.794333               144.929217   \n",
       "629   Flemington, Kensington              -37.794333               144.929217   \n",
       "748                Melbourne              -37.814563               144.970267   \n",
       "854          North Melbourne              -37.905996               145.056254   \n",
       "878                Parkville              -37.796152               144.961351   \n",
       "880                Parkville              -37.796152               144.961351   \n",
       "882                Parkville              -37.796152               144.961351   \n",
       "890                Parkville              -37.796152               144.961351   \n",
       "908                Parkville              -37.796152               144.961351   \n",
       "1023          Port Melbourne              -37.829244               144.956207   \n",
       "1208  Southbank, South Wharf              -37.823258               144.965926   \n",
       "1236             South Yarra              -37.837883               144.991123   \n",
       "1237             South Yarra              -37.837883               144.991123   \n",
       "1240             South Yarra              -37.837883               144.991123   \n",
       "1298             South Yarra              -37.837883               144.991123   \n",
       "1351          West Melbourne              -37.806255               144.941123   \n",
       "1373          West Melbourne              -37.806255               144.941123   \n",
       "\n",
       "                               Venue                        id  \\\n",
       "118                     Black Waffle  5889c670561ded0e0cdcf83c   \n",
       "269                          Gelobar  4b309abaf964a52066fa24e3   \n",
       "497               Richmond Rush Cafe  4b4a9cf0f964a520908b26e3   \n",
       "602                   Wolf and Hound  551aaadd498eb847ed7d9d5a   \n",
       "629                    Dessert Story  517d11cd498e0661e28448cb   \n",
       "748                  La Belle Miette  51c8eb47498ed8c19c9fc387   \n",
       "854                    Common Ground  514505b7e4b0fd5cba96d65d   \n",
       "878                    Standing Room  56b14e3e498e18541d770482   \n",
       "880                Carlton Wine Room  4de1faa0c65b7a3e21100fd3   \n",
       "882                   House Of Cards  51d9eaad498e4254d6e50135   \n",
       "890   The Vertue of the Coffee Drink  54dc008d498e2dfd2baecf7c   \n",
       "908                       Koko Black  4b0881c7f964a520570d23e3   \n",
       "1023                         Bibelot  554d7d38498e0a16ae46ff55   \n",
       "1208                 Le Petit Gâteau  4b0f401ff964a520d66023e3   \n",
       "1236   Burch & Purchese Sweet Studio  4dae8e6b6a23e6c9348c4c55   \n",
       "1237                  The Final Step  4b86ebabf964a520f4a531e3   \n",
       "1240                         LuxBite  4c883ed897828cfa2dc49aaa   \n",
       "1298  Frozen By A Thousand Blessings  52634f6511d22d57fc9616e9   \n",
       "1351         Chocolateria San Churro  4c393623ae2da593813e02c6   \n",
       "1373          Gelateria on the Docks  5559c695498eb806ef4e37a1   \n",
       "\n",
       "      Venue Latitude  Venue Longitude Venue Category  \n",
       "118       -37.772534       144.998427   Dessert Shop  \n",
       "269       -37.776441       144.970986   Dessert Shop  \n",
       "497       -37.823577       144.989324    Coffee Shop  \n",
       "602       -37.786564       144.929076    Coffee Shop  \n",
       "629       -37.788000       144.929920   Dessert Shop  \n",
       "748       -37.813610       144.973348   Dessert Shop  \n",
       "854       -37.905658       145.052635    Coffee Shop  \n",
       "878       -37.797294       144.962919    Coffee Shop  \n",
       "880       -37.798584       144.968610       Wine Bar  \n",
       "882       -37.799243       144.961597    Coffee Shop  \n",
       "890       -37.797648       144.968365    Coffee Shop  \n",
       "908       -37.801804       144.966723   Dessert Shop  \n",
       "1023      -37.832553       144.958152   Dessert Shop  \n",
       "1208      -37.816254       144.959585   Dessert Shop  \n",
       "1236      -37.837736       144.995938   Dessert Shop  \n",
       "1237      -37.838580       144.990273    Coffee Shop  \n",
       "1240      -37.838482       144.987822   Dessert Shop  \n",
       "1298      -37.837428       144.995967   Dessert Shop  \n",
       "1351      -37.812009       144.937244   Dessert Shop  \n",
       "1373      -37.812369       144.937667   Dessert Shop  "
      ]
     },
     "execution_count": 339,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_recommendation_df_all = my_recommendation_df_all.drop_duplicates(subset='Venue', keep=\"last\")\n",
    "my_recommendation_df_all"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Yet, thus recommendation lists sorted alphabetically by ‘neighborhood’ index. As I was an out-of-towner, I figured the next question that could arise with the plan on my second visit to Melbourne, “How to find the coolest place that suits my preferences”. Therefore, I come up with a little adjustment to solve the problem that may occur.!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Neighbourhood Latitude</th>\n",
       "      <th>Neighbourhood Longitude</th>\n",
       "      <th>Venue</th>\n",
       "      <th>id</th>\n",
       "      <th>Venue Latitude</th>\n",
       "      <th>Venue Longitude</th>\n",
       "      <th>Venue Category</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Naughty Boy</td>\n",
       "      <td>544affcd498e693acaed575e</td>\n",
       "      <td>-37.784351</td>\n",
       "      <td>144.969688</td>\n",
       "      <td>Breakfast Spot</td>\n",
       "      <td>8.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Filou’s Artisan Patissier</td>\n",
       "      <td>4cae8a5beb65b1f7adf05ccd</td>\n",
       "      <td>-37.787357</td>\n",
       "      <td>144.969448</td>\n",
       "      <td>Bakery</td>\n",
       "      <td>8.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Neighbourhood Wine</td>\n",
       "      <td>51384a8fe4b0828b66c2a7d4</td>\n",
       "      <td>-37.785133</td>\n",
       "      <td>144.977638</td>\n",
       "      <td>Wine Bar</td>\n",
       "      <td>9.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Gerald's Bar</td>\n",
       "      <td>4b0ddfd0f964a520d25123e3</td>\n",
       "      <td>-37.788356</td>\n",
       "      <td>144.972097</td>\n",
       "      <td>Wine Bar</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Great Northern Hotel</td>\n",
       "      <td>4bd175b4b221c9b6f689d5d0</td>\n",
       "      <td>-37.782090</td>\n",
       "      <td>144.973501</td>\n",
       "      <td>Gastropub</td>\n",
       "      <td>7.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>400</th>\n",
       "      <td>East Melbourne</td>\n",
       "      <td>-37.816640</td>\n",
       "      <td>144.987811</td>\n",
       "      <td>Ha Long Bay</td>\n",
       "      <td>4b161ecaf964a52008b723e3</td>\n",
       "      <td>-37.809928</td>\n",
       "      <td>144.994371</td>\n",
       "      <td>Vietnamese Restaurant</td>\n",
       "      <td>6.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>401</th>\n",
       "      <td>East Melbourne</td>\n",
       "      <td>-37.816640</td>\n",
       "      <td>144.987811</td>\n",
       "      <td>Tokyo House</td>\n",
       "      <td>4bd7abd709ecb713947b477c</td>\n",
       "      <td>-37.818468</td>\n",
       "      <td>144.998247</td>\n",
       "      <td>Sushi Restaurant</td>\n",
       "      <td>6.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>402</th>\n",
       "      <td>East Melbourne</td>\n",
       "      <td>-37.816640</td>\n",
       "      <td>144.987811</td>\n",
       "      <td>Noodle World</td>\n",
       "      <td>4b0b94f5f964a520663223e3</td>\n",
       "      <td>-37.818446</td>\n",
       "      <td>144.997673</td>\n",
       "      <td>Asian Restaurant</td>\n",
       "      <td>6.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>403</th>\n",
       "      <td>East Melbourne</td>\n",
       "      <td>-37.816640</td>\n",
       "      <td>144.987811</td>\n",
       "      <td>Richmond Rush Cafe</td>\n",
       "      <td>4b4a9cf0f964a520908b26e3</td>\n",
       "      <td>-37.823577</td>\n",
       "      <td>144.989324</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>404</th>\n",
       "      <td>East Melbourne</td>\n",
       "      <td>-37.816640</td>\n",
       "      <td>144.987811</td>\n",
       "      <td>Holliava</td>\n",
       "      <td>4b27454ff964a5208e8524e3</td>\n",
       "      <td>-37.824858</td>\n",
       "      <td>144.990327</td>\n",
       "      <td>Bar</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>405 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Neighbourhood  Neighbourhood Latitude  Neighbourhood Longitude  \\\n",
       "0           Carlton              -37.784337               144.969747   \n",
       "1           Carlton              -37.784337               144.969747   \n",
       "2           Carlton              -37.784337               144.969747   \n",
       "3           Carlton              -37.784337               144.969747   \n",
       "4           Carlton              -37.784337               144.969747   \n",
       "..              ...                     ...                      ...   \n",
       "400  East Melbourne              -37.816640               144.987811   \n",
       "401  East Melbourne              -37.816640               144.987811   \n",
       "402  East Melbourne              -37.816640               144.987811   \n",
       "403  East Melbourne              -37.816640               144.987811   \n",
       "404  East Melbourne              -37.816640               144.987811   \n",
       "\n",
       "                         Venue                        id  Venue Latitude  \\\n",
       "0                  Naughty Boy  544affcd498e693acaed575e      -37.784351   \n",
       "1    Filou’s Artisan Patissier  4cae8a5beb65b1f7adf05ccd      -37.787357   \n",
       "2           Neighbourhood Wine  51384a8fe4b0828b66c2a7d4      -37.785133   \n",
       "3                 Gerald's Bar  4b0ddfd0f964a520d25123e3      -37.788356   \n",
       "4         Great Northern Hotel  4bd175b4b221c9b6f689d5d0      -37.782090   \n",
       "..                         ...                       ...             ...   \n",
       "400                Ha Long Bay  4b161ecaf964a52008b723e3      -37.809928   \n",
       "401                Tokyo House  4bd7abd709ecb713947b477c      -37.818468   \n",
       "402               Noodle World  4b0b94f5f964a520663223e3      -37.818446   \n",
       "403         Richmond Rush Cafe  4b4a9cf0f964a520908b26e3      -37.823577   \n",
       "404                   Holliava  4b27454ff964a5208e8524e3      -37.824858   \n",
       "\n",
       "     Venue Longitude         Venue Category rating  \n",
       "0         144.969688         Breakfast Spot    8.1  \n",
       "1         144.969448                 Bakery    8.4  \n",
       "2         144.977638               Wine Bar    9.1  \n",
       "3         144.972097               Wine Bar    8.0  \n",
       "4         144.973501              Gastropub    7.7  \n",
       "..               ...                    ...    ...  \n",
       "400       144.994371  Vietnamese Restaurant    6.2  \n",
       "401       144.998247       Sushi Restaurant    6.2  \n",
       "402       144.997673       Asian Restaurant    6.1  \n",
       "403       144.989324            Coffee Shop    6.0  \n",
       "404       144.990327                    Bar    6.0  \n",
       "\n",
       "[405 rows x 9 columns]"
      ]
     },
     "execution_count": 316,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Taking the full dataset for melbourne venue ~ rating listed here and Drop the 'not rated' rating\n",
    "#This is the dataset for *Rated only Venue\n",
    "for_recom_data_use_only = ratings_df[ratings_df['rating'] != 'not rated']\n",
    "for_recom_data_use_only.reset_index(inplace=True)\n",
    "for_recom_data_use_only=for_recom_data_use_only.drop(['index'],axis=1)\n",
    "for_recom_data_use_only"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 333,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#Raw Recommendation type 2, which include only #rated# Venues\n",
    "my_recommendation_df = for_recom_data_use_only.loc[for_recom_data_use_only['Venue'].isin(recommendationTable_df_sorted.head(50).keys())]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 336,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Neighbourhood Latitude</th>\n",
       "      <th>Neighbourhood Longitude</th>\n",
       "      <th>Venue</th>\n",
       "      <th>id</th>\n",
       "      <th>Venue Latitude</th>\n",
       "      <th>Venue Longitude</th>\n",
       "      <th>Venue Category</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>250</th>\n",
       "      <td>Docklands</td>\n",
       "      <td>-37.814719</td>\n",
       "      <td>144.948039</td>\n",
       "      <td>Patricia Coffee Brewers</td>\n",
       "      <td>4ee91d794901e2d61a51221b</td>\n",
       "      <td>-37.814598</td>\n",
       "      <td>144.958350</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>9.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>258</th>\n",
       "      <td>Docklands</td>\n",
       "      <td>-37.814719</td>\n",
       "      <td>144.948039</td>\n",
       "      <td>Bonnie Coffee Brewers</td>\n",
       "      <td>54595fe3498e0495dbbd7559</td>\n",
       "      <td>-37.818153</td>\n",
       "      <td>144.957636</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>8.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>234</th>\n",
       "      <td>Docklands</td>\n",
       "      <td>-37.814719</td>\n",
       "      <td>144.948039</td>\n",
       "      <td>Blended Beard</td>\n",
       "      <td>56a57631498e73cc282787fa</td>\n",
       "      <td>-37.819633</td>\n",
       "      <td>144.944355</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>8.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>260</th>\n",
       "      <td>Docklands</td>\n",
       "      <td>-37.814719</td>\n",
       "      <td>144.948039</td>\n",
       "      <td>LB2</td>\n",
       "      <td>52aac1e211d203b737f7b9f1</td>\n",
       "      <td>-37.817188</td>\n",
       "      <td>144.956668</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>8.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>325</th>\n",
       "      <td>East Melbourne</td>\n",
       "      <td>-37.816640</td>\n",
       "      <td>144.987811</td>\n",
       "      <td>The Tippler &amp; Co</td>\n",
       "      <td>529ae10d498e63e159a0b100</td>\n",
       "      <td>-37.816510</td>\n",
       "      <td>144.988240</td>\n",
       "      <td>Wine Bar</td>\n",
       "      <td>8.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>348</th>\n",
       "      <td>East Melbourne</td>\n",
       "      <td>-37.816640</td>\n",
       "      <td>144.987811</td>\n",
       "      <td>KereKere Green</td>\n",
       "      <td>5469dc50498e64b49d8f6506</td>\n",
       "      <td>-37.815057</td>\n",
       "      <td>144.979541</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>254</th>\n",
       "      <td>Docklands</td>\n",
       "      <td>-37.814719</td>\n",
       "      <td>144.948039</td>\n",
       "      <td>Code Black Coffee Roasters</td>\n",
       "      <td>5317ecbc498e1fe77a64f921</td>\n",
       "      <td>-37.820797</td>\n",
       "      <td>144.945380</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>345</th>\n",
       "      <td>East Melbourne</td>\n",
       "      <td>-37.816640</td>\n",
       "      <td>144.987811</td>\n",
       "      <td>Rowena Parade Corner Store</td>\n",
       "      <td>4b1b10e6f964a5207ef723e3</td>\n",
       "      <td>-37.820628</td>\n",
       "      <td>144.991872</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>7.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>360</th>\n",
       "      <td>East Melbourne</td>\n",
       "      <td>-37.816640</td>\n",
       "      <td>144.987811</td>\n",
       "      <td>Shopfront Coffee</td>\n",
       "      <td>5588d175498e72e3b191f738</td>\n",
       "      <td>-37.809050</td>\n",
       "      <td>144.987940</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>7.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>Docklands</td>\n",
       "      <td>-37.814719</td>\n",
       "      <td>144.948039</td>\n",
       "      <td>Rex Tremendae</td>\n",
       "      <td>5366c5a5498ea50e94ac45ae</td>\n",
       "      <td>-37.819767</td>\n",
       "      <td>144.955779</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>7.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>316</th>\n",
       "      <td>Docklands</td>\n",
       "      <td>-37.814719</td>\n",
       "      <td>144.948039</td>\n",
       "      <td>Chocolateria San Churro</td>\n",
       "      <td>4c393623ae2da593813e02c6</td>\n",
       "      <td>-37.812009</td>\n",
       "      <td>144.937244</td>\n",
       "      <td>Dessert Shop</td>\n",
       "      <td>7.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>309</th>\n",
       "      <td>Docklands</td>\n",
       "      <td>-37.814719</td>\n",
       "      <td>144.948039</td>\n",
       "      <td>St Ali Mercedes me</td>\n",
       "      <td>5a02379d51950e024edbd691</td>\n",
       "      <td>-37.818410</td>\n",
       "      <td>144.956810</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>7.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>291</th>\n",
       "      <td>Docklands</td>\n",
       "      <td>-37.814719</td>\n",
       "      <td>144.948039</td>\n",
       "      <td>Coffee Gauge</td>\n",
       "      <td>4b95a838f964a52022ae34e3</td>\n",
       "      <td>-37.819977</td>\n",
       "      <td>144.943955</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>7.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>200</th>\n",
       "      <td>Carlton North</td>\n",
       "      <td>-37.780995</td>\n",
       "      <td>144.962792</td>\n",
       "      <td>Gelobar</td>\n",
       "      <td>4b309abaf964a52066fa24e3</td>\n",
       "      <td>-37.776441</td>\n",
       "      <td>144.970986</td>\n",
       "      <td>Dessert Shop</td>\n",
       "      <td>7.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320</th>\n",
       "      <td>Docklands</td>\n",
       "      <td>-37.814719</td>\n",
       "      <td>144.948039</td>\n",
       "      <td>Cherry &amp; Twigs</td>\n",
       "      <td>51bbcc76498e47af47ee9e21</td>\n",
       "      <td>-37.819994</td>\n",
       "      <td>144.955713</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>7.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>312</th>\n",
       "      <td>Docklands</td>\n",
       "      <td>-37.814719</td>\n",
       "      <td>144.948039</td>\n",
       "      <td>Espresso Hub</td>\n",
       "      <td>4bc7a063af07a593ec947f2d</td>\n",
       "      <td>-37.819192</td>\n",
       "      <td>144.953763</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>7.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379</th>\n",
       "      <td>East Melbourne</td>\n",
       "      <td>-37.816640</td>\n",
       "      <td>144.987811</td>\n",
       "      <td>Cohen Cellars Wine Bar</td>\n",
       "      <td>4bac9a1ff964a52089fd3ae3</td>\n",
       "      <td>-37.809791</td>\n",
       "      <td>144.985363</td>\n",
       "      <td>Wine Bar</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>-37.778987</td>\n",
       "      <td>145.002600</td>\n",
       "      <td>Black Waffle</td>\n",
       "      <td>5889c670561ded0e0cdcf83c</td>\n",
       "      <td>-37.772534</td>\n",
       "      <td>144.998427</td>\n",
       "      <td>Dessert Shop</td>\n",
       "      <td>6.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152</th>\n",
       "      <td>Carlton North</td>\n",
       "      <td>-37.784337</td>\n",
       "      <td>144.969747</td>\n",
       "      <td>Bar Fred</td>\n",
       "      <td>4b11bbf1f964a520608323e3</td>\n",
       "      <td>-37.780720</td>\n",
       "      <td>144.978026</td>\n",
       "      <td>Wine Bar</td>\n",
       "      <td>6.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>403</th>\n",
       "      <td>East Melbourne</td>\n",
       "      <td>-37.816640</td>\n",
       "      <td>144.987811</td>\n",
       "      <td>Richmond Rush Cafe</td>\n",
       "      <td>4b4a9cf0f964a520908b26e3</td>\n",
       "      <td>-37.823577</td>\n",
       "      <td>144.989324</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Neighbourhood  Neighbourhood Latitude  Neighbourhood Longitude  \\\n",
       "250       Docklands              -37.814719               144.948039   \n",
       "258       Docklands              -37.814719               144.948039   \n",
       "234       Docklands              -37.814719               144.948039   \n",
       "260       Docklands              -37.814719               144.948039   \n",
       "325  East Melbourne              -37.816640               144.987811   \n",
       "348  East Melbourne              -37.816640               144.987811   \n",
       "254       Docklands              -37.814719               144.948039   \n",
       "345  East Melbourne              -37.816640               144.987811   \n",
       "360  East Melbourne              -37.816640               144.987811   \n",
       "298       Docklands              -37.814719               144.948039   \n",
       "316       Docklands              -37.814719               144.948039   \n",
       "309       Docklands              -37.814719               144.948039   \n",
       "291       Docklands              -37.814719               144.948039   \n",
       "200   Carlton North              -37.780995               144.962792   \n",
       "320       Docklands              -37.814719               144.948039   \n",
       "312       Docklands              -37.814719               144.948039   \n",
       "379  East Melbourne              -37.816640               144.987811   \n",
       "91          Carlton              -37.778987               145.002600   \n",
       "152   Carlton North              -37.784337               144.969747   \n",
       "403  East Melbourne              -37.816640               144.987811   \n",
       "\n",
       "                          Venue                        id  Venue Latitude  \\\n",
       "250     Patricia Coffee Brewers  4ee91d794901e2d61a51221b      -37.814598   \n",
       "258       Bonnie Coffee Brewers  54595fe3498e0495dbbd7559      -37.818153   \n",
       "234               Blended Beard  56a57631498e73cc282787fa      -37.819633   \n",
       "260                         LB2  52aac1e211d203b737f7b9f1      -37.817188   \n",
       "325            The Tippler & Co  529ae10d498e63e159a0b100      -37.816510   \n",
       "348              KereKere Green  5469dc50498e64b49d8f6506      -37.815057   \n",
       "254  Code Black Coffee Roasters  5317ecbc498e1fe77a64f921      -37.820797   \n",
       "345  Rowena Parade Corner Store  4b1b10e6f964a5207ef723e3      -37.820628   \n",
       "360            Shopfront Coffee  5588d175498e72e3b191f738      -37.809050   \n",
       "298               Rex Tremendae  5366c5a5498ea50e94ac45ae      -37.819767   \n",
       "316     Chocolateria San Churro  4c393623ae2da593813e02c6      -37.812009   \n",
       "309          St Ali Mercedes me  5a02379d51950e024edbd691      -37.818410   \n",
       "291                Coffee Gauge  4b95a838f964a52022ae34e3      -37.819977   \n",
       "200                     Gelobar  4b309abaf964a52066fa24e3      -37.776441   \n",
       "320              Cherry & Twigs  51bbcc76498e47af47ee9e21      -37.819994   \n",
       "312                Espresso Hub  4bc7a063af07a593ec947f2d      -37.819192   \n",
       "379      Cohen Cellars Wine Bar  4bac9a1ff964a52089fd3ae3      -37.809791   \n",
       "91                 Black Waffle  5889c670561ded0e0cdcf83c      -37.772534   \n",
       "152                    Bar Fred  4b11bbf1f964a520608323e3      -37.780720   \n",
       "403          Richmond Rush Cafe  4b4a9cf0f964a520908b26e3      -37.823577   \n",
       "\n",
       "     Venue Longitude Venue Category rating  \n",
       "250       144.958350    Coffee Shop    9.1  \n",
       "258       144.957636    Coffee Shop    8.7  \n",
       "234       144.944355    Coffee Shop    8.4  \n",
       "260       144.956668    Coffee Shop    8.1  \n",
       "325       144.988240       Wine Bar    8.1  \n",
       "348       144.979541    Coffee Shop    8.0  \n",
       "254       144.945380    Coffee Shop    8.0  \n",
       "345       144.991872    Coffee Shop    7.8  \n",
       "360       144.987940    Coffee Shop    7.6  \n",
       "298       144.955779    Coffee Shop    7.6  \n",
       "316       144.937244   Dessert Shop    7.4  \n",
       "309       144.956810    Coffee Shop    7.4  \n",
       "291       144.943955    Coffee Shop    7.4  \n",
       "200       144.970986   Dessert Shop    7.3  \n",
       "320       144.955713    Coffee Shop    7.2  \n",
       "312       144.953763    Coffee Shop    7.1  \n",
       "379       144.985363       Wine Bar    7.0  \n",
       "91        144.998427   Dessert Shop    6.7  \n",
       "152       144.978026       Wine Bar    6.5  \n",
       "403       144.989324    Coffee Shop    6.0  "
      ]
     },
     "execution_count": 336,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#My Recommendation after dropping duplicate Venue\n",
    "my_recommendation_df = my_recommendation_df.drop_duplicates(subset='Venue', keep=\"last\")\n",
    "#Sort Recommendation from the Best Rating\n",
    "my_recommendation_df_best = my_recommendation_df.sort_values(by='rating', ascending=False)\n",
    "#Show the top20 by Best Rating\n",
    "my_recommendation_df_best.head(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Discussion section\n",
    "\n",
    "#### Advantages and Disadvantages of Content-Based Filtering\n",
    "- Advantages\n",
    "\n",
    "Bringing model that could understand user preferences\n",
    "\n",
    "Highly personalized for the user preferences and parameters\n",
    "\n",
    "- Disadvantages\n",
    "\n",
    "Limited constraints and parameters, so the accuraccy issues maybe occurs\n",
    "\n",
    "xtricating information isn't generally natural \n",
    "\n",
    "Figuring out what qualities of the thing the client aversions or preferences isn't generally self-evident"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Closure\n",
    "\n",
    "\n",
    "When planning to go to Melbourne, it may be helpful in understanding the qualities of the venues in the neighborhood. So now have you known which neighborhoods that might fit and might not fit your inclinations? Feel free to ask me if there are further questions regarding this project!\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
